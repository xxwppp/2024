# -*- coding: utf-8 -*-
#!/usr/bin/env python3
"""
* 仅供学习交流，请在下载后的24小时内完全删除 请勿将任何内容用于商业或非法目的，否则后果自负。
* 猫猫看看 V2.11

* 活动入口,微信打开：
* 如果连接过期了运行一下就出来了最新的入口！
* http://9pw4.dsdtew.shop/haobaobao/auth/58487f291985c5f32c16b3b01b96a912
* 打开活动入口，抓包的任意接口cookies中的Cookie参数
* 
* 变量格式：
* 新建同名环境变量
* 变量名：mykkyd
* 变量值：
* # 3000 代表 3毛，后面两个推送参数可不填，那就必须配置全局推送！
* 账号备注#Cookie参数#提现金额如3000#wxpushApptoken#wxpushTopicId
* 
* 其他参数说明（脚本最下方填写参数）
* wxpusher全局参数：wxpusherAppToken、wxpusherTopicId
* 具体使用方法请看文档地址：https://wxpusher.zjiecode.com/docs/#/
* 
* 也可使用 微信机器人：wechatBussinessKey
* 
* 支持支付宝提现：账号备注#Cookie参数#提现金额如3000#wxpushApptoken#wxpushTopicId#支付宝姓名#支付宝账号
* 只想提现支付宝，不想填写其他参数，最少的参数就是：账号备注#Cookie参数###支付宝姓名#支付宝账号
*
* 增加 自定义检测文章等待时间：mykkydReadPostDelay，默认值是 15-20秒
* 增加 精简日志：mykkydReadPureLog，默认值是 true（也就是精简日志，如果需要显示完整的，请设置为 false）
*
* 定时运行每半小时一次
* 达到标准，自动提现
"""
# This file requires Python 3.x and the following dependencies:
# - base64
try:
    import base64
    exec(base64.b64decode('IiIiCiog5LuF5L6b5a2m5Lmg5Lqk5rWB77yM6K+35Zyo5LiL6L295ZCO55qEMjTlsI/ml7blhoXlrozlhajliKDpmaQg6K+35Yu/5bCG5Lu75L2V5YaF5a6555So5LqO5ZWG5Lia5oiW6Z2e5rOV55uu55qE77yM5ZCm5YiZ5ZCO5p6c6Ieq6LSf44CCCiog54yr54yr55yL55yLIFYyLjExCgoqIOa0u+WKqOWFpeWPoyzlvq7kv6HmiZPlvIDvvJoKKiDlpoLmnpzov57mjqXov4fmnJ/kuobov5DooYzkuIDkuIvlsLHlh7rmnaXkuobmnIDmlrDnmoTlhaXlj6PvvIEKKiBodHRwOi8vOXB3NC5kc2R0ZXcuc2hvcC9oYW9iYW9iYW8vYXV0aC81ODQ4N2YyOTE5ODVjNWYzMmMxNmIzYjAxYjk2YTkxMgoqIOaJk+W8gOa0u+WKqOWFpeWPo++8jOaKk+WMheeahOS7u+aEj+aOpeWPo2Nvb2tpZXPkuK3nmoRDb29raWXlj4LmlbAKKiAKKiDlj5jph4/moLzlvI/vvJoKKiDmlrDlu7rlkIzlkI3njq/looPlj5jph48KKiDlj5jph4/lkI3vvJpteWtreWQKKiDlj5jph4/lgLzvvJoKKiAjIDMwMDAg5Luj6KGoIDPmr5vvvIzlkI7pnaLkuKTkuKrmjqjpgIHlj4LmlbDlj6/kuI3loavvvIzpgqPlsLHlv4XpobvphY3nva7lhajlsYDmjqjpgIHvvIEKKiDotKblj7flpIfms6gjQ29va2ll5Y+C5pWwI+aPkOeOsOmHkemineWmgjMwMDAjd3hwdXNoQXBwdG9rZW4jd3hwdXNoVG9waWNJZAoqIAoqIOWFtuS7luWPguaVsOivtOaYju+8iOiEmuacrOacgOS4i+aWueWhq+WGmeWPguaVsO+8iQoqIHd4cHVzaGVy5YWo5bGA5Y+C5pWw77yad3hwdXNoZXJBcHBUb2tlbuOAgXd4cHVzaGVyVG9waWNJZAoqIOWFt+S9k+S9v+eUqOaWueazleivt+eci+aWh+aho+WcsOWdgO+8mmh0dHBzOi8vd3hwdXNoZXIuemppZWNvZGUuY29tL2RvY3MvIy8KKiAKKiDkuZ/lj6/kvb/nlKgg5b6u5L+h5py65Zmo5Lq677yad2VjaGF0QnVzc2luZXNzS2V5CiogCiog5pSv5oyB5pSv5LuY5a6d5o+Q546w77ya6LSm5Y+35aSH5rOoI0Nvb2tpZeWPguaVsCPmj5DnjrDph5Hpop3lpoIzMDAwI3d4cHVzaEFwcHRva2VuI3d4cHVzaFRvcGljSWQj5pSv5LuY5a6d5aeT5ZCNI+aUr+S7mOWunei0puWPtwoqIOWPquaDs+aPkOeOsOaUr+S7mOWune+8jOS4jeaDs+Whq+WGmeWFtuS7luWPguaVsO+8jOacgOWwkeeahOWPguaVsOWwseaYr++8mui0puWPt+Wkh+azqCNDb29raWXlj4LmlbAjIyPmlK/ku5jlrp3lp5PlkI0j5pSv5LuY5a6d6LSm5Y+3CioKKiDlop7liqAg6Ieq5a6a5LmJ5qOA5rWL5paH56ug562J5b6F5pe26Ze077yabXlra3lkUmVhZFBvc3REZWxhee+8jOm7mOiupOWAvOaYryAxNS0yMOenkgoqIOWinuWKoCDnsr7nroDml6Xlv5fvvJpteWtreWRSZWFkUHVyZUxvZ++8jOm7mOiupOWAvOaYryB0cnVl77yI5Lmf5bCx5piv57K+566A5pel5b+X77yM5aaC5p6c6ZyA6KaB5pi+56S65a6M5pW055qE77yM6K+36K6+572u5Li6IGZhbHNl77yJCioKKiDlrprml7bov5DooYzmr4/ljYrlsI/ml7bkuIDmrKEKKiDovr7liLDmoIflh4bvvIzoh6rliqjmj5DnjrAKIiIiCgppbXBvcnQgaGFzaGxpYgppbXBvcnQganNvbgppbXBvcnQgbWF0aAppbXBvcnQgb3MKaW1wb3J0IHN5cwppbXBvcnQgdGltZQppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJhbmRvbQppbXBvcnQgcmUKZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHF1b3RlLCB1cmxwYXJzZSwgcGFyc2VfcXMKaW1wb3J0IHVybGxpYjMKZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHBhcnNlX3FzLCB1cmxzcGxpdAppbXBvcnQgaGFzaGxpYgoKdXJsbGliMy5kaXNhYmxlX3dhcm5pbmdzKCkKCiMg5aGrd3hwdXNoZXLnmoRhcHBUb2tlbu+8jOmFjee9ruWcqOeOr+Wig+WPmOmHj+mHjOi/meagt+ayoemFjee9rueahOi0puWPt+S8muiHquWKqOS9v+eUqOi/meS4quaOqOmAgQp3eHB1c2hlckFwcFRva2VuID0gb3MuZ2V0ZW52KCJ3eHB1c2hlckFwcFRva2VuIikgb3IgIiIKd3hwdXNoZXJUb3BpY0lkID0gb3MuZ2V0ZW52KCJ3eHB1c2hlclRvcGljSWQiKSBvciAiIgp3ZWNoYXRCdXNzaW5lc3NLZXkgPSBvcy5nZXRlbnYoIndlY2hhdEJ1c3NpbmVzc0tleSIpIG9yICIiCm15a2t5ZERldGVjdGluZ1NlYWxTdGF0dXMgPSBUcnVlCm15a2t5ZERpc2FibGVkRGV0ZWN0aW5nU2VhbFNldHRpbmcgPSBvcy5nZXRlbnYoIm15a2t5ZERpc2FibGVkRGV0ZWN0aW5nU2VhbCIpCmlmIG15a2t5ZERpc2FibGVkRGV0ZWN0aW5nU2VhbFNldHRpbmcgbm90IGluIFsiIiwgTm9uZV06CiAgICBpZiBteWtreWREaXNhYmxlZERldGVjdGluZ1NlYWxTZXR0aW5nIGluIFsiMSIsICJ0cnVlIiwgVHJ1ZV06CiAgICAgICAgbXlra3lkRGV0ZWN0aW5nU2VhbFN0YXR1cyA9IEZhbHNlCnJlYWRQb3N0RGVsYXkgPSAwCmlmIG9zLmdldGVudigibXlra3lkUmVhZFBvc3REZWxheSIpIGFuZCBvcy5nZXRlbnYoIm15a2t5ZFJlYWRQb3N0RGVsYXkiKS5pc2RlY2ltYWwoKToKICAgIHJlYWRQb3N0RGVsYXkgPSBpbnQob3MuZ2V0ZW52KCJteWtreWRSZWFkUG9zdERlbGF5IikpCm15a2t5ZFJlYWRQdXJlTG9nID0gVHJ1ZQppZiBvcy5nZXRlbnYoIm15a2t5ZFJlYWRQdXJlTG9nIik6CiAgICBteWtreWRSZWFkUHVyZUxvZyA9IG9zLmdldGVudigibXlra3lkUmVhZFB1cmVMb2ciKSA9PSAidHJ1ZSIKIyDorr7nva7ku6PnkIblnLDlnYDlkoznq6/lj6MKcHJveGllcyA9IE5vbmUKaWYgb3MuZ2V0ZW52KCJteWtreWRIdHRwUHJveHlVcmwiKToKICAgIHByb3hpZXMgPSB7CiAgICAgICAgImh0dHAiOiBvcy5nZXRlbnYoIm15a2t5ZEh0dHBQcm94eVVybCIpLAogICAgICAgICJodHRwcyI6IG9zLmdldGVudigibXlra3lkSHR0cFByb3h5VXJsIiksCiAgICB9CgoKZGVmIGNoZWNrX2ZpbGVfbWQ1KHVybCwgZXhwZWN0ZWRfbWQ1KToKICAgICMg6I635Y+W5paH5Lu25YaF5a65CiAgICByZXNwb25zZSA9IHNhZmVfcmVxdWVzdCgiR0VUIiwgdXJsKQogICAgZGF0YSA9IHJlc3BvbnNlLmNvbnRlbnQKCiAgICAjIOiuoeeul01ENQogICAgbWQ1ID0gaGFzaGxpYi5tZDUoKQogICAgbWQ1LnVwZGF0ZShkYXRhKQogICAgY2FsY3VsYXRlZF9tZDUgPSBtZDUuaGV4ZGlnZXN0KCkKICAgICMgcHJpbnQoIuW9k+WJjeaWh+S7tueahE1ENeWAvOS4uu+8miIsIGNhbGN1bGF0ZWRfbWQ1KQogICAgIyDmr5TovoNNRDUKICAgIHJldHVybiBjYWxjdWxhdGVkX21kNSA9PSBleHBlY3RlZF9tZDUKCgpkZWYgY2hlY2tfc3RyX21kNShzdHIsIGV4cGVjdGVkX21kNSk6CiAgICAjIOiuoeeul01ENQogICAgbWQ1ID0gaGFzaGxpYi5tZDUoKQogICAgbWQ1LnVwZGF0ZShzdHIuZW5jb2RlKCJ1dGYtOCIpKQogICAgY2FsY3VsYXRlZF9tZDUgPSBtZDUuaGV4ZGlnZXN0KCkKICAgICMgcHJpbnQoIuW9k+WJjeWGheWuueeahE1ENeWAvOS4uu+8miIsIGNhbGN1bGF0ZWRfbWQ1KQogICAgIyDmr5TovoNNRDUKICAgIHJldHVybiBjYWxjdWxhdGVkX21kNSA9PSBleHBlY3RlZF9tZDUKCgpkZWYgZXh0cmFjdF9taWRkbGVfdGV4dChzb3VyY2UsIGJlZm9yZV90ZXh0LCBhZnRlcl90ZXh0LCBhbGxfbWF0Y2hlcz1GYWxzZSk6CiAgICByZXN1bHRzID0gW10KICAgIHN0YXJ0X2luZGV4ID0gc291cmNlLmZpbmQoYmVmb3JlX3RleHQpCgogICAgd2hpbGUgc3RhcnRfaW5kZXggIT0gLTE6CiAgICAgICAgc291cmNlX2FmdGVyX2JlZm9yZV90ZXh0ID0gc291cmNlW3N0YXJ0X2luZGV4ICsgbGVuKGJlZm9yZV90ZXh0KSA6XQogICAgICAgIGVuZF9pbmRleCA9IHNvdXJjZV9hZnRlcl9iZWZvcmVfdGV4dC5maW5kKGFmdGVyX3RleHQpCgogICAgICAgIGlmIGVuZF9pbmRleCA9PSAtMToKICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgcmVzdWx0cy5hcHBlbmQoc291cmNlX2FmdGVyX2JlZm9yZV90ZXh0WzplbmRfaW5kZXhdKQogICAgICAgIGlmIG5vdCBhbGxfbWF0Y2hlczoKICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgc291cmNlID0gc291cmNlX2FmdGVyX2JlZm9yZV90ZXh0W2VuZF9pbmRleCArIGxlbihhZnRlcl90ZXh0KSA6XQogICAgICAgIHN0YXJ0X2luZGV4ID0gc291cmNlLmZpbmQoYmVmb3JlX3RleHQpCgogICAgcmV0dXJuIHJlc3VsdHMgaWYgYWxsX21hdGNoZXMgZWxzZSByZXN1bHRzWzBdIGlmIHJlc3VsdHMgZWxzZSAiIgoKCmRlZiBwdXNoKGFwcFRva2VuLCB0b3BpY0lkcywgdGl0bGUsIGxpbmssIHRleHQsIHR5cGUpOgogICAgZGF0YXB1c3QgPSB7CiAgICAgICAgImFwcFRva2VuIjogYXBwVG9rZW4sCiAgICAgICAgImNvbnRlbnQiOiBmIiIiPGJvZHkgb25sb2FkPSJ3aW5kb3cubG9jYXRpb24uaHJlZj0ne2xpbmt9JyI+5Ye6546w5qOA5rWL5paH56ug77yB77yB77yBXG48YSBzdHlsZT0ncGFkZGluZzoxMHB4O2NvbG9yOnJlZDtmb250LXNpemU6MjBweDsnIGhyZWY9J3tsaW5rfSc+54K55Ye75oiR5omT5byA5b6F5qOA5rWL5paH56ugPC9hPlxu6K+35bC95b+r54K55Ye76ZO+5o6l5a6M5oiQ6ZiF6K+7XG7lpIfms6jvvJp7dGV4dH08L2JvZHk+IiIiLAogICAgICAgICJzdW1tYXJ5IjogdGl0bGUgb3IgIueMq+eMq+eci+eci+mYheivuyIsCiAgICAgICAgImNvbnRlbnRUeXBlIjogMiwKICAgICAgICAidG9waWNJZHMiOiBbdG9waWNJZHMgb3IgIjExNjg2Il0sCiAgICAgICAgInVybCI6IGxpbmssCiAgICB9CiAgICAjIHByaW50KGRhdGFwdXN0KQogICAgdXJscHVzdCA9ICJodHRwOi8vd3hwdXNoZXIuemppZWNvZGUuY29tL2FwaS9zZW5kL21lc3NhZ2UiCiAgICB0cnk6CiAgICAgICAgcCA9IHNhZmVfcmVxdWVzdCgiUE9TVCIsIHVybD11cmxwdXN0LCBqc29uPWRhdGFwdXN0LCB2ZXJpZnk9RmFsc2UpCiAgICAgICAgIyBwcmludChwKQogICAgICAgIGlmIHAuanNvbigpWyJjb2RlIl0gPT0gMTAwMDoKICAgICAgICAgICAgcHJpbnQoIuKchSDmjqjpgIHmlofnq6DliLDlvq7kv6HmiJDlip/vvIzor7flsL3lv6vliY3lvoDngrnlh7vmlofnq6DvvIzkuI3nhLblsLHpu5Hlj7fllabvvIEiKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCLinYwg5o6o6YCB5paH56ug5Yiw5b6u5L+h5aSx6LSl77yM5a6M54qK5a2Q77yM6KaB6buR5Y+35LqG77yBIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBleGNlcHQ6CiAgICAgICAgcHJpbnQoIuKdjCDmjqjpgIHmlofnq6DliLDlvq7kv6HlpLHotKXvvIzlrozniorlrZDvvIzopoHpu5Hlj7fkuobvvIEiKQogICAgICAgIHJldHVybiBGYWxzZQoKCmRlZiBwdXNoV2VjaGF0QnVzc2luZXNzKHJvYm90S2V5LCBsaW5rKToKICAgIGRhdGFwdXN0ID0geyJtc2d0eXBlIjogInRleHQiLCAidGV4dCI6IHsiY29udGVudCI6IGxpbmt9fQogICAgIyBwcmludChkYXRhcHVzdCkKICAgIHVybHB1c3QgPSAiaHR0cHM6Ly9xeWFwaS53ZWl4aW4ucXEuY29tL2NnaS1iaW4vd2ViaG9vay9zZW5kP2tleT0iICsgcm9ib3RLZXkKICAgIHRyeToKICAgICAgICBwID0gc2FmZV9yZXF1ZXN0KCJQT1NUIiwgdXJsPXVybHB1c3QsIGpzb249ZGF0YXB1c3QsIHZlcmlmeT1GYWxzZSkKICAgICAgICAjIHByaW50KHApCiAgICAgICAgaWYgcC5qc29uKClbImVycmNvZGUiXSA9PSAwOgogICAgICAgICAgICBwcmludCgi4pyFIOaOqOmAgeaWh+eroOWIsOS8geS4muW+ruS/oeaIkOWKn++8gSIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIuKdjCDmjqjpgIHmlofnq6DliLDkvIHkuJrlvq7kv6HlpLHotKXvvIEiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIGV4Y2VwdDoKICAgICAgICBwcmludCgi4p2MIOaOqOmAgeaWh+eroOWIsOS8geS4muW+ruS/oeWksei0pe+8gSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCgoKZGVmIGdldGluZm8obGluayk6CiAgICB0cnk6CiAgICAgICAgciA9IHNhZmVfcmVxdWVzdCgiR0VUIiwgbGluaywgdmVyaWZ5PUZhbHNlKQogICAgICAgICMgcHJpbnQobGluaywgci50ZXh0KQogICAgICAgIGh0bWwgPSByZS5zdWIoIlxzIiwgIiIsIHIudGV4dCkKICAgICAgICBiaXogPSByZS5maW5kYWxsKCd2YXJiaXo9IiguKj8pIlx8XHwnLCBodG1sKQogICAgICAgIGlmIGJpeiAhPSBbXToKICAgICAgICAgICAgYml6ID0gYml6WzBdCiAgICAgICAgaWYgYml6ID09ICIiIG9yIGJpeiA9PSBbXToKICAgICAgICAgICAgaWYgIl9fYml6IiBpbiBsaW5rOgogICAgICAgICAgICAgICAgYml6ID0gcmUuZmluZGFsbCgiX19iaXo9KC4qPykmIiwgbGluaykKICAgICAgICAgICAgICAgIGlmIGJpeiAhPSBbXToKICAgICAgICAgICAgICAgICAgICBiaXogPSBiaXpbMF0KICAgICAgICBuaWNrbmFtZSA9IHJlLmZpbmRhbGwoJ3Zhcm5pY2tuYW1lPWh0bWxEZWNvZGVcKCIoLio/KSJcKTsnLCBodG1sKQogICAgICAgIGlmIG5pY2tuYW1lICE9IFtdOgogICAgICAgICAgICBuaWNrbmFtZSA9IG5pY2tuYW1lWzBdCiAgICAgICAgdXNlcl9uYW1lID0gcmUuZmluZGFsbCgndmFydXNlcl9uYW1lPSIoLio/KSI7JywgaHRtbCkKICAgICAgICBpZiB1c2VyX25hbWUgIT0gW106CiAgICAgICAgICAgIHVzZXJfbmFtZSA9IHVzZXJfbmFtZVswXQogICAgICAgIG1zZ190aXRsZSA9IHJlLmZpbmRhbGwoInZhcm1zZ190aXRsZT0nKC4qPyknXC5odG1sXCgiLCBodG1sKQogICAgICAgIGlmIG1zZ190aXRsZSAhPSBbXToKICAgICAgICAgICAgbXNnX3RpdGxlID0gbXNnX3RpdGxlWzBdCiAgICAgICAgdGV4dCA9IGYi5YWs5LyX5Y+35ZSv5LiA5qCH6K+G77yae2Jpen185paH56ugOnttc2dfdGl0bGV9fOS9nOiAhTp7bmlja25hbWV9fOi0puWPtzp7dXNlcl9uYW1lfSIKICAgICAgICBwcmludCh0ZXh0KQogICAgICAgIHJldHVybiBuaWNrbmFtZSwgdXNlcl9uYW1lLCBtc2dfdGl0bGUsIHRleHQsIGJpegogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICMgcHJpbnQoZSkKICAgICAgICBwcmludCgi4p2MIOaPkOWPluaWh+eroOS/oeaBr+Wksei0pSIpCiAgICAgICAgcmV0dXJuIEZhbHNlCgoKZGVmIHRyaW1TcGFjZUNoYXJhY3RlcnModGV4dCk6CiAgICByZXR1cm4gIiIuam9pbih0ZXh0LnNwbGl0KCkpCgoKY2xhc3MgTGlua0NhY2hlOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGZpbGVfcGF0aCk6CiAgICAgICAgc2VsZi5maWxlX3BhdGggPSBmaWxlX3BhdGgKICAgICAgICBzZWxmLmNhY2hlID0gc2VsZi5sb2FkX2NhY2hlKCkKCiAgICBkZWYgbG9hZF9jYWNoZShzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggb3BlbihzZWxmLmZpbGVfcGF0aCwgInIiKSBhcyBmOgogICAgICAgICAgICAgICAgZGF0YSA9IGpzb24ubG9hZChmKQogICAgICAgICAgICByZXR1cm4gZGF0YQogICAgICAgIGV4Y2VwdCAoRmlsZU5vdEZvdW5kRXJyb3IsIGpzb24uSlNPTkRlY29kZUVycm9yKToKICAgICAgICAgICAgcmV0dXJuIHt9CgogICAgZGVmIHNhdmVfY2FjaGUoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aXRoIG9wZW4oc2VsZi5maWxlX3BhdGgsICJ3IikgYXMgZjoKICAgICAgICAgICAgICAgIGpzb24uZHVtcChzZWxmLmNhY2hlLCBmLCBpbmRlbnQ9MikKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KCLml6Dms5Xkv53lrZjpk77mjqXliLDmnKzlnLDnvJPlrZjmlofku7bvvJoiLCBlKQoKICAgIGRlZiBhZGRfbGluayhzZWxmLCBsaW5rLCBkYXRlKToKICAgICAgICBpZiBsaW5rIG5vdCBpbiBzZWxmLmNhY2hlOgogICAgICAgICAgICBzZWxmLmNhY2hlW2xpbmtdID0geyJwdWJsaXNoRGF0ZSI6IGRhdGUsICJjb3VudCI6IDF9CiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5jYWNoZVtsaW5rXVsiY291bnQiXSArPSAxCiAgICAgICAgc2VsZi5zYXZlX2NhY2hlKCkKCiAgICBkZWYgZ2V0X2xpbmtfaW5mbyhzZWxmLCBsaW5rKToKICAgICAgICByZXR1cm4gc2VsZi5jYWNoZS5nZXQobGluaywgTm9uZSkKCiAgICBkZWYgZ2V0X2FsbF9saW5rcyhzZWxmKToKICAgICAgICByZXR1cm4gbGlzdChzZWxmLmNhY2hlLmtleXMoKSkKCgpsaW5rX2NhY2hlID0gTGlua0NhY2hlKCJodWFuc2hlbmdfbXlra19saW5rX2NhY2hlLmpzb24iKQoKCmRlZiBmZXRjaF93eF90aW1lX2FuZF9yZWNvcmQodXJsLCBsaW5rX2NhY2hlKToKICAgIG1heF9yZXRyaWVzID0gMwogICAgaGVhZGVycyA9IHsKICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IFJNWDE5NzEgQnVpbGQvUUtRMS4xOTA5MTguMDAxOyB3dikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgQ2hyb21lLzExNi4wLjAuMCBNb2JpbGUgU2FmYXJpLzUzNy4zNiBYV0VCLzExNjAwODMgTU1XRUJTREsvMjAyMzEyMDIgTU1XRUJJRC84MzQyIE1pY3JvTWVzc2VuZ2VyLzguMC40Ny4yNTYwKDB4MjgwMDJGNTEpIFdlQ2hhdC9hcm02NCBXZWl4aW4gTmV0VHlwZS9XSUZJIExhbmd1YWdlL3poX0NOIEFCSS9hcm02NCIKICAgIH0KICAgIGZvciBpIGluIHJhbmdlKG1heF9yZXRyaWVzKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KHVybCwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICB3eCA9IHJlc3BvbnNlLnRleHQKICAgICAgICAgICAgd3pfdGltZV9yZWdleCA9IHIidmFyIGNyZWF0ZVRpbWUgPSAnKC4qPyknOyIKICAgICAgICAgICAgbWF0Y2ggPSByZS5zZWFyY2god3pfdGltZV9yZWdleCwgd3gpCiAgICAgICAgICAgIGlmIG1hdGNoOgogICAgICAgICAgICAgICAgYXJ0aWNsZV90aW1lID0gbWF0Y2guZ3JvdXAoMSkKICAgICAgICAgICAgICAgIHByaW50KGYi5b6u5L+h5paH56ug5Y+R5biD5pe26Ze0OiB7YXJ0aWNsZV90aW1lfSIpCiAgICAgICAgICAgICAgICBsaW5rX2luZm8gPSBsaW5rX2NhY2hlLmdldF9saW5rX2luZm8odXJsKQogICAgICAgICAgICAgICAgcHJpbnQoZiLor6Xmo4DmtYvmlofnq6DvvIzlt7LorrDlvZXkuoYge2xpbmtfaW5mb1snY291bnQnXSBpZiBsaW5rX2luZm8gZWxzZSAwICsgMX0g5qyhIikKICAgICAgICAgICAgICAgIGxpbmtfY2FjaGUuYWRkX2xpbmsodXJsLCBhcnRpY2xlX3RpbWUpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiLmo4DmtYvlvq7kv6Hmlofnq6Dml7bpl7Tlj5HnlJ/plJnor686IHtlfSIpCiAgICAgICAgICAgIHJldHVybiBUcnVlCgoKZGVmIHNhZmVfcmVxdWVzdChtZXRob2QsIHVybCwgcmV0cmllcz0zLCAqKmt3YXJncyk6CiAgICBmb3IgaSBpbiByYW5nZShyZXRyaWVzKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIG1ldGhvZC51cHBlcigpID09ICJHRVQiOgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsLCAqKmt3YXJncykKICAgICAgICAgICAgZWxpZiBtZXRob2QudXBwZXIoKSA9PSAiUE9TVCI6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QodXJsLCAqKmt3YXJncykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByaW50KGYi5LiN5pSv5oyB55qE6K+35rGC57G75Z6LOiB7bWV0aG9kfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UKICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5SZXF1ZXN0RXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGYi6K+35rGC5aSx6LSlOiB7ZX0iKQogICAgICAgICAgICBpZiBpIDwgcmV0cmllcyAtIDE6ICAjIOWmguaenOS4jeaYr+acgOWQjuS4gOasoeWwneivle+8jOWwseetieW+heS4gOauteaXtumXtOWGjemHjeivlQogICAgICAgICAgICAgICAgd2FpdCA9IHJhbmRvbS5yYW5kaW50KDEsIDUpICAjIOmaj+acuuetieW+heaXtumXtAogICAgICAgICAgICAgICAgcHJpbnQoZiLnrYnlvoUge3dhaXR9IOenkuWQjumHjeivlS4uLiIpCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKHdhaXQpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludCgi5bCd6K+V6K+35rGC5aSx6LSl77yM5bey6L6+5Yiw5pyA5aSn5bCd6K+V5qyh5pWwIikKICAgICAgICAgICAgICAgIHJldHVybiBOb25lICAjIOaIluiAheS9oOWPr+S7pei/lOWbnuS4gOS4queJueWumueahOWAvOaIluWvueixoeadpeihqOekuuivt+axguWksei0pQoKCmRlZiB0cygpOgogICAgcmV0dXJuIHN0cihpbnQodGltZS50aW1lKCkpKSArICIwMDAiCgoKY2hlY2tEaWN0ID0gewogICAgIk16a3hOVEUzTXpRNE1RPT0iOiBbIummmeWnkOeIseaXheihjCIsICJnaF81NGE2NWRjNjAwMzkiXSwKICAgICJNemc1TWpNME1ERXdOdz09IjogWyLmiJHmnKzpnZ7lh6EiLCAiZ2hfNDZiMDc2OTAzNDczIl0sCiAgICAiTXpVek9EWTROekUyT1E9PSI6IFsi5aSa6IKJ6JGh6JCEMjAyMCIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNemt5TWpFM016WXhNZz09IjogWyJZb3VoZnVsIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16a3hOak13TkRJek9BPT0iOiBbIuWwkeW5tOayoeacieS5jOaJmOmCpjMiLCAiZ2hfYjNkNzljZDFlMWI1Il0sCiAgICAiTXpnM056VXhNamM1TWc9PSI6IFsi5pif5pif6K+66KiAIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16ZzROVGN3T0RFMU5BPT0iOiBbIuaWkemprOi/mOayoeedoTEyMyIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNemswT0RJeE9ERTRPUT09IjogWyLmjIHlrrblppnmi5vlrp3lhbgiLCAiZ2hfYjNkNzljZDFlMWI1Il0sCiAgICAiTXpnMk5qVXlNakkxTkE9PSI6IFsiTGlsaW5uZyIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNekl6TURjek9EZzRNdz09IjogWyLmnInmlYXkuovnmoTlkIzlraZZIiwgImdoX2IzZDc5Y2QxZTFiNSJdLAogICAgIk16ZzVPRFV5TXpZek1RPT0iOiBbIjc4OeS5n+S4jeihjCIsICJnaF9iM2Q3OWNkMWUxYjUiXSwKICAgICJNelUwTnpJNU1qYzRPUT09IjogWyLnmq7om4vnmKbogonnjKoiLCAiZ2hfNThkN2VlNTkzYjg2Il0sCiAgICAiTXpnNU1EZ3hPREF6TWc9PSI6IFsi5YyX5YyX5bCP5Yqp5omLIiwgImdoXzU4ZDdlZTU5M2I4NiJdLAogICAgIk16SXpNRGN6T0RnNE13PT0iOiBbIuacieaVheS6i+eahOWQjOWtplkiLCAiZ2hfYjhiOTI5MzRkYTVmIl0sCiAgICAiTXpreE5EVTFOREV6Tnc9PSI6IFsi54yr54yr55yL55yL5pyN5YqhIiwgImdoX2U1MGNmZWZlZjllNSJdLAogICAgIk16a3pOVFl4T1RneU1BPT0iOiBbIumfreiPnOeCkumxv+mxvCIsICJnaF9jMTMxYzNlZTExODciXSwKICAgICJNemt4TkRZek9URXlNdz09IjogWyLok53ojpPlj6/kuZAiLCAiZ2hfNzNjYTIzOGFkZDk3Il0sCiAgICAiTXprd01UWXdOemN3TXc9PSI6IFsi6Im+5YWL6YeM6bitIiwgImdoXzc3YWNhZmQ1NTJkYSJdLAogICAgIk16a3lOalkwTVRFeE9BPT0iOiBbIuWkp+mBk+aZuueugCIsICJnaF81MTQ2MTMwYjE3ODkiXSwKICAgICJNemt5TWpZeE56UTJOQT09IjogWyLkuZ3ngrnlh4bml7bnnaE554K5IiwgImdoXzQ4ZmRhMmY4OTM2YyJdLAogICAgIk16a3pNVFl5TURVME9RPT0iOiBbIuS4gOe9kOWltuWFlOWFlOWtkCIsICJnaF84ODQxZWM2ZjU5MGEiXSwKICAgICJNemt6TkRZeE9EWTVPQT09IjogWyLmsqHmnInmmJ/mnJ84IiwgImdoXzkxNDNiZjY3NjI0NSJdLAogICAgIk16a3dOell3TkRZeU1RPT0iOiBbIuaWh+WtpueIseWlveiAhTAwNyIsICJnaF9lZWFiYjRkZmViZWQiXSwKfQoKCmNsYXNzIEhIWUQ6CiAgICBkZWYgX19pbml0X18oc2VsZiwgY2cpOgogICAgICAgIHNlbGYuQ29va2llID0gY2dbIkNvb2tpZSJdCiAgICAgICAgc2VsZi50eGJ6ID0gY2dbInR4YnoiXQogICAgICAgIHNlbGYudG9waWNJZHMgPSBjZ1sidG9waWNJZHMiXQogICAgICAgIHNlbGYuYXBwVG9rZW4gPSBjZ1siYXBwVG9rZW4iXQogICAgICAgIGdsb2JhbCB3ZWNoYXRCdXNzaW5lc3NLZXkKICAgICAgICBzZWxmLndlY2hhdEJ1c3NpbmVzc0tleSA9IHdlY2hhdEJ1c3NpbmVzc0tleSBvciAiIgogICAgICAgIHNlbGYuYWxpQWNjb3VudCA9IGNnWyJhbGlBY2NvdW50Il0gb3IgIiIKICAgICAgICBzZWxmLmFsaU5hbWUgPSBjZ1siYWxpTmFtZSJdIG9yICIiCiAgICAgICAgc2VsZi5uYW1lID0gY2dbIm5hbWUiXQogICAgICAgIHNlbGYuZG9tbmFpbkhvc3QgPSAiMTY5ODg1NTEzOS5oeGlvbmcudG9wIgogICAgICAgIHNlbGYucmVxdWVzdF9pZCA9ICIiCiAgICAgICAgc2VsZi5oZWFkZXJzID0gewogICAgICAgICAgICAiQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgIkFjY2VwdCI6ICJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQsICovKjsgcT0wLjAxIiwKICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA2MjEpIFhXRUIvODM1MSBGbHVlIiwKICAgICAgICAgICAgIlgtUmVxdWVzdGVkLVdpdGgiOiAiWE1MSHR0cFJlcXVlc3QiLAogICAgICAgICAgICAiUmVmZXJlciI6IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS8iLAogICAgICAgICAgICAiT3JpZ2luIjogZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9IiwKICAgICAgICAgICAgIyAiSG9zdCI6IGYie3NlbGYuZG9tbmFpbkhvc3R9IiwKICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aCIsCiAgICAgICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IiwKICAgICAgICAgICAgIkNvb2tpZSI6IHNlbGYuQ29va2llLAogICAgICAgIH0KICAgICAgICBzZWxmLmxhc3RiaXogPSAiIgogICAgICAgIHNlbGYucmVhZEp1bXBQYXRoID0gIiIKICAgICAgICBzZWxmLnJldHJ5UmVhZGluZyA9IEZhbHNlCiAgICAgICAgc2VsZi5yZW1haW5fZ29sZCA9IDAKICAgICAgICBzZWxmLnJlbWFpbiA9IDAKICAgICAgICBzZWxmLnJlYWRBcGlWZXJzaW9uID0gIjguMCIKCiAgICBkZWYgdXNlcl9pbmZvKHNlbGYpOgogICAgICAgIHUgPSBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0vaGFvYmFvYmFvL3VzZXIiCiAgICAgICAgciA9ICIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICByID0gc2FmZV9yZXF1ZXN0KCJHRVQiLCB1LCBoZWFkZXJzPXNlbGYuaGVhZGVycykKICAgICAgICAgICAgcmogPSByLmpzb24oKQogICAgICAgICAgICBpZiByai5nZXQoImVycmNvZGUiKSA9PSAwOgogICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d6I635Y+W5L+h5oGv5oiQ5Yqf77yM55So5oi3SUTkuLoge3IuanNvbigpWydkYXRhJ11bJ3VzZXJpZCddfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d6I635Y+W55So5oi35L+h5oGv5aSx6LSl77yM6LSm5Y+35byC5bi4IOaIluiAhSBDb29raWXml6DmlYjvvIzor7fmo4DmtYtDb29raWXmmK/lkKbmraPnoa4iKQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBwcmludChyLnRleHQpCiAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeiOt+WPlueUqOaIt+S/oeaBr+Wksei0pSxDb29raWXml6DmlYjvvIzor7fmo4DmtYtDb29raWXmmK/lkKbmraPnoa4iKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgZ29sZChzZWxmKToKICAgICAgICByID0gIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIHUgPSBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0vaGFvYmFvYmFvL3dvcmtpbmZvIgogICAgICAgICAgICByID0gc2FmZV9yZXF1ZXN0KCJHRVQiLCB1LCBoZWFkZXJzPXNlbGYuaGVhZGVycykKICAgICAgICAgICAgIyBwcmludChyLmpzb24oKSkKICAgICAgICAgICAgcmogPSByLmpzb24oKQogICAgICAgICAgICBzZWxmLnJlbWFpbl9nb2xkID0gbWF0aC5mbG9vcihpbnQocmouZ2V0KCJkYXRhIikuZ2V0KCJyZW1haW5fZ29sZCIpKSkKICAgICAgICAgICAgc2VsZi5yZW1haW4gPSBmbG9hdChyai5nZXQoImRhdGEiKS5nZXQoInJlbWFpbiIpKQogICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgIGYn5LuK5pel5bey57uP6ZiF6K+75LqGe3JqLmdldCgiZGF0YSIpLmdldCgiZGF5cmVhZHMiKX3nr4fmlofnq6Ag5b2T5YmN6YeR5biBe3JqLmdldCgiZGF0YSIpLmdldCgicmVtYWluX2dvbGQiKX0g5b2T5YmN5L2Z6aKde3NlbGYucmVtYWlufScKICAgICAgICAgICAgKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d6I635Y+W6YeR5biB5aSx6LSlIikKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIGdldEtleShzZWxmKToKICAgICAgICB1ayA9ICIiCiAgICAgICAgdWtSZXMgPSBOb25lCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMTApOgogICAgICAgICAgICB1ID0gZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9e3NlbGYucmVhZEp1bXBQYXRofSIKICAgICAgICAgICAgIyBwcmludCgi5o+Q56S6IGdldEtlee+8miIsIHUpCiAgICAgICAgICAgIHAgPSBmIiIKICAgICAgICAgICAgciA9IHNhZmVfcmVxdWVzdCgiUE9TVCIsIHUsIGhlYWRlcnM9c2VsZi5oZWFkZXJzLCBkYXRhPXAsIHZlcmlmeT1GYWxzZSkKICAgICAgICAgICAgIyBwcmludCgiZ2V0S2V577yaIiwgci50ZXh0KQogICAgICAgICAgICByaiA9IHIuanNvbigpCiAgICAgICAgICAgIGRvbWFpbiA9IHJqLmdldCgiZGF0YSIpLmdldCgiZG9tYWluIikKICAgICAgICAgICAgIyBwcmludCgi6K+35rGC5Lit6L2s6aG177yaIiwgci50ZXh0KQogICAgICAgICAgICBwcCA9IHBhcnNlX3FzKHVybHBhcnNlKGRvbWFpbikucXVlcnkpCiAgICAgICAgICAgIGhuID0gdXJscGFyc2UoZG9tYWluKS5uZXRsb2MKICAgICAgICAgICAgdWsgPSBwcC5nZXQoInVrIilbMF0KICAgICAgICAgICAgdWtSZXMgPSByLnRleHQKICAgICAgICAgICAgaWYgdWs6CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGlmIHVrID09ICIiOgogICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3ojrflj5Z1a+Wksei0pe+8jOi/lOWbnumUmeivr++8mnt1a1Jlc30iKQogICAgICAgICAgICByZXR1cm4KICAgICAgICB0aW1lLnNsZWVwKDAuNSkKICAgICAgICByID0gc2FmZV9yZXF1ZXN0KAogICAgICAgICAgICAiR0VUIiwKICAgICAgICAgICAgZG9tYWluLAogICAgICAgICAgICBoZWFkZXJzPXsKICAgICAgICAgICAgICAgICJBY2NlcHQiOiAidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwKICAgICAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSwgYnIiLAogICAgICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aDtxPTAuOSIsCiAgICAgICAgICAgICAgICAiQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgICAgICJIb3N0IjogZiJ7aG59IiwKICAgICAgICAgICAgICAgICJTZWMtRmV0Y2gtRGVzdCI6ICJkb2N1bWVudCIsCiAgICAgICAgICAgICAgICAiU2VjLUZldGNoLU1vZGUiOiAibmF2aWdhdGUiLAogICAgICAgICAgICAgICAgIlNlYy1GZXRjaC1TaXRlIjogIm5vbmUiLAogICAgICAgICAgICAgICAgIlNlYy1GZXRjaC1Vc2VyIjogIj8xIiwKICAgICAgICAgICAgICAgICJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzIjogIjEiLAogICAgICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA3MWQpIFhXRUIvODQ2MSBGbHVlIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdmVyaWZ5PUZhbHNlLAogICAgICAgICkKICAgICAgICAjIDxzY3JpcHQgc3JjPSJodHRwczovL2ltYWdlLmh6eXNteXkuY24veXVuc2FvbWEvbmV3cHJvamVjdC9qcy9hcnRpY2xlLmpzP3Y0LjAiPjwvc2NyaXB0PgogICAgICAgIHJlYWRKc1ZlcnNpb24gPSBleHRyYWN0X21pZGRsZV90ZXh0KHIudGV4dCwgImpzL2FydGljbGUuanM/IiwgJyInKQogICAgICAgIGlmIHJlYWRKc1ZlcnNpb246CiAgICAgICAgICAgIGNoZWNrSnNDb2RlQ2hhbmdlZCA9ICgKICAgICAgICAgICAgICAgIGNoZWNrX2ZpbGVfbWQ1KAogICAgICAgICAgICAgICAgICAgIGV4dHJhY3RfbWlkZGxlX3RleHQoci50ZXh0LCAnPHNjcmlwdCBzcmM9IicsICciPjwvc2NyaXAnKSwKICAgICAgICAgICAgICAgICAgICAiMDY3NDI5OTY3NGMyYzU0ZTRjOWM4MTExMDEyNTUyYTciLAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgPT0gRmFsc2UKICAgICAgICAgICAgKQogICAgICAgICAgICBpZiAocmVhZEpzVmVyc2lvbiAhPSAidjExLjAiKSBvciBjaGVja0pzQ29kZUNoYW5nZWQ6CiAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV0g5qOA5rWL5Yiw5o6l5Y+j54mI5pys5Y+R55Sf5Y+Y5YyW77yM5b2T5YmN5o6l5Y+j54mI5pys5Li677yae3JlYWRKc1ZlcnNpb25977yM5ouJ5ZON6K2m5oql77yM5Y+w5a2Q5pCe5LqL77yM6KaB5oqT5Lq65LqG77yM5byA5aeL5pKk6YCA77yM6YCA5Ye656iL5bqPID4+ICIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHN5cy5leGl0KDApCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDpmIXor7vlh4blpIflrozmiJDvvJp7dWt977yM5o+Q5Y+W5Yiw55qE5Zyw5Z2A77yae2RvbWFpbn0iKQogICAgICAgICAgICAgICAgaWYgbXlra3lkUmVhZFB1cmVMb2cgPT0gRmFsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDpmIXor7vlh4blpIfmiJDlip/vvIzlvZPliY3mjqXlj6PniYjmnKzkuLrvvJp7cmVhZEpzVmVyc2lvbn0g5Y2z5bCG5byA5aeL6ZiF6K+7IOKchSDvvIzpmIXor7vlj4LmlbDkuLrvvJp7dWt9IgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXNUZXh0ID0gdHJpbVNwYWNlQ2hhcmFjdGVycyhyLnRleHQpCiAgICAgICAgICAgICMgaHR0cDovLzBmMmJiMWI2NTAudDE3MTM1MTUyMjlzLnphY2gtaW90Lm9ubGluZS95ZDIuaHRtbD91az1lNGJkMTQzYzNlMjU3MmRhODBjMmRmZDZlMTNlN2E3OCZ0PTE3MTM1MTUyNTYKICAgICAgICAgICAgcmVhZEFwaVZlcnNpb24gPSBleHRyYWN0X21pZGRsZV90ZXh0KAogICAgICAgICAgICAgICAgcmVzVGV4dCwKICAgICAgICAgICAgICAgIHRyaW1TcGFjZUNoYXJhY3RlcnMoCiAgICAgICAgICAgICAgICAgICAgJ3VybDogZG9tYWluKyIvZGllc21tazM/dGltZT0iKyB0aW1lICsiJm15c2lnbj0xNjgmdnM9JwogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIHRyaW1TcGFjZUNoYXJhY3RlcnMoJyZ1az0iKyB1aywnKSwKICAgICAgICAgICAgKQogICAgICAgICAgICBpZiByZWFkQXBpVmVyc2lvbjoKICAgICAgICAgICAgICAgIHNlbGYucmVhZEFwaVZlcnNpb24gPSByZWFkQXBpVmVyc2lvbgogICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICB0cmltU3BhY2VDaGFyYWN0ZXJzKAogICAgICAgICAgICAgICAgICAgIGYndXJsOiBkb21haW4rIi9kaWVzbW1rMz90aW1lPSIrIHRpbWUgKyImbXlzaWduPTE2OCZ2cz17c2VsZi5yZWFkQXBpVmVyc2lvbn0mdWs9IisgdWssJwogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgaW4gcmVzVGV4dAogICAgICAgICAgICAgICAgYW5kIHRyaW1TcGFjZUNoYXJhY3RlcnMoCiAgICAgICAgICAgICAgICAgICAgJ3VybDogZG9tYWluKyIvamlhamluYmltYW8/dGltZT0iK3RpbWUrIiZwc2lnbj0iK3BzaWduKyImdWs9Iit1aywnCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBpbiByZXNUZXh0CiAgICAgICAgICAgICAgICAjIGFuZCBjaGVja19zdHJfbWQ1KAogICAgICAgICAgICAgICAgIyAgICAgZXh0cmFjdF9taWRkbGVfdGV4dCgKICAgICAgICAgICAgICAgICMgICAgICAgICByZXNUZXh0LCAnPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPicsICI8L3NjcmlwdD4iCiAgICAgICAgICAgICAgICAjICAgICApLnJlcGxhY2UoCiAgICAgICAgICAgICAgICAjICAgICAgICAgZid1cmw6IGRvbWFpbisiL3dlbnpqa3M/dGltZT0iKyB0aW1lICsiJm15c2lnbj0xNjgmdnM9OC4wJnVrPSIrIHVrLCcsCiAgICAgICAgICAgICAgICAjICAgICAgICAgZid1cmw6IGRvbWFpbisiL3dlbnpqa3M/dGltZT0iKyB0aW1lICsiJm15c2lnbj0xNjgmdnM9e3NlbGYucmVhZEFwaVZlcnNpb259JnVrPSIrIHVrLCcsCiAgICAgICAgICAgICAgICAjICAgICApLAogICAgICAgICAgICAgICAgIyAgICAgImYzNGFiM2RkMmQzOGE4MmJhYmEzYWMwYTU0OTQwN2Q5IiwKICAgICAgICAgICAgICAgICMgKQogICAgICAgICAgICApOgogICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+WHhuWkh+WujOaIkO+8jOW9k+WJjSDliqDlr4bku6PnoIFoYXNo5YC8IOS4jiDpooTorr7lgLzkuIDoh7TvvIzliqDlr4blhoXlrrnmnKrkv67mlLnvvIzlj6/nu6fnu63pmIXor7sg4pyFICIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g5qOA5rWL5Yiw5Yqg5a+G5Luj56CB5YaF5a655Y+R55Sf5Y+Y5YyW77yM5ouJ5ZON6K2m5oql77yM5Y+w5a2Q5pCe5LqL77yM6KaB5oqT5Lq65LqG77yM5byA5aeL5pKk6YCA77yM6YCA5Ye656iL5bqPID4+ICIpCiAgICAgICAgICAgICAgICBvcy5fZXhpdCgwKQogICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICBoID0gewogICAgICAgICAgICAiQWNjZXB0IjogImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCwgKi8qOyBxPTAuMDEiLAogICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUsIGJyIiwKICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aDtxPTAuOSIsCiAgICAgICAgICAgICJDb25uZWN0aW9uIjogImtlZXAtYWxpdmUiLAogICAgICAgICAgICAiSG9zdCI6IGhuLAogICAgICAgICAgICAiT3JpZ2luIjogZiJodHRwczovL3tobn0iLAogICAgICAgICAgICAiU2VjLUZldGNoLURlc3QiOiAiZW1wdHkiLAogICAgICAgICAgICAiU2VjLUZldGNoLU1vZGUiOiAiY29ycyIsCiAgICAgICAgICAgICJTZWMtRmV0Y2gtU2l0ZSI6ICJjcm9zcy1zaXRlIiwKICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA3MWQpIFhXRUIvODQ2MSBGbHVlIiwKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHVrLCBoCgogICAgZGVmIHJlYWQoc2VsZik6CiAgICAgICAgaW5mbyA9IHNlbGYuZ2V0S2V5KCkKICAgICAgICBpZiBsZW4oaW5mbykgPT0gMDoKICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d6I635Y+W6ZiF6K+75Y+C5pWw5aSx6LSl77yM5YGc5q2i5b6A5ZCO6ZiF6K+777yB4pqg77iPICIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgICMgcHJpbnQoaW5mbykKICAgICAgICB0aW1lLnNsZWVwKDIpCiAgICAgICAgYXJjdGlsZVRpbWUgPSAxCiAgICAgICAgc2VsZi5yZXRyeVJlYWRpbmcgPSBGYWxzZQogICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgIHJlcyA9IHsiZXJyY29kZSI6IC0xfQogICAgICAgICAgICAjIHJhd1JlcyA9ICIiCiAgICAgICAgICAgIHJlZnJlc2hUaW1lID0gMAogICAgICAgICAgICB3aGlsZSByZXNbImVycmNvZGUiXSAhPSAwOgogICAgICAgICAgICAgICAgc2VsZi5yZXRyeVJlYWRpbmcgPSBGYWxzZQogICAgICAgICAgICAgICAgdGltZVN0YW1wID0gc3RyKHRzKCkpCiAgICAgICAgICAgICAgICBteXNpZ24gPSBoYXNobGliLm1kNSgKICAgICAgICAgICAgICAgICAgICAoaW5mb1sxXVsiSG9zdCJdICsgdGltZVN0YW1wICsgIkxqKj9RMyNwT3ZpVyIpLmVuY29kZSgpCiAgICAgICAgICAgICAgICApLmhleGRpZ2VzdCgpCiAgICAgICAgICAgICAgICBzZWxmLnBhcmFtcyA9IHsKICAgICAgICAgICAgICAgICAgICAidGltZSI6IHRpbWVTdGFtcCwKICAgICAgICAgICAgICAgICAgICAibXlzaWduIjogIjE2OCIsCiAgICAgICAgICAgICAgICAgICAgInZzIjogc2VsZi5yZWFkQXBpVmVyc2lvbiwKICAgICAgICAgICAgICAgICAgICAidWsiOiBpbmZvWzBdLAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdSA9IGYiaHR0cDovL3tpbmZvWzFdWydIb3N0J119L2RpZXNtbWszIgogICAgICAgICAgICAgICAgIyBwcmludCgKICAgICAgICAgICAgICAgICMgICAgICLpmIXor7vmlofnq6Dlj4LmlbDmn6XnnIvvvJoiLAogICAgICAgICAgICAgICAgIyAgICAgdSwKICAgICAgICAgICAgICAgICMgICAgIHNlbGYucGFyYW1zLAogICAgICAgICAgICAgICAgIyAgICAgaW5mbywKICAgICAgICAgICAgICAgICMgICAgIGluZm9bMV1bIk9yaWdpbiJdLnJlcGxhY2UoImh0dHBzOi8vIiwgIiIpLnJlcGxhY2UoIi8iLCAiIiksCiAgICAgICAgICAgICAgICAjICkKICAgICAgICAgICAgICAgIHIgPSBzYWZlX3JlcXVlc3QoCiAgICAgICAgICAgICAgICAgICAgIkdFVCIsCiAgICAgICAgICAgICAgICAgICAgdSwKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPWluZm9bMV0sCiAgICAgICAgICAgICAgICAgICAgcGFyYW1zPXNlbGYucGFyYW1zLAogICAgICAgICAgICAgICAgICAgIHZlcmlmeT1GYWxzZSwKICAgICAgICAgICAgICAgICAgICB0aW1lb3V0PTYwLAogICAgICAgICAgICAgICAgICAgIHByb3hpZXM9cHJveGllcywKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHByaW50KCItIiAqIDUwKQogICAgICAgICAgICAgICAgIyBpZiBteWtreWRSZWFkUHVyZUxvZyA9PSBGYWxzZToKICAgICAgICAgICAgICAgICMgICAgIHByaW50KAogICAgICAgICAgICAgICAgIyAgICBmIui0puWPt1t7c2VsZi5uYW1lfV3nrKxbe3JlZnJlc2hUaW1lKzF9XeasoeiOt+WPlumYheivu+aWh+eroFt7aW5mb1swXX1d55uu55qE6aG177yae3IudGV4dH0iCiAgICAgICAgICAgICAgICAjICkKICAgICAgICAgICAgICAgICMgcmF3UmVzID0gci50ZXh0CiAgICAgICAgICAgICAgICAjIHByaW50KCLojrflj5bmlofnq6DpmIXor7vpk77mjqXvvJoiLCByLnRleHQpCiAgICAgICAgICAgICAgICBpZiByLnRleHQgPT0gIiI6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeesrFt7cmVmcmVzaFRpbWUrMX1d5qyh6I635Y+W6ZiF6K+75paH56ugW3tpbmZvWzBdfV3nm67nmoTpobXlpLHotKXvvIzor7fmo4Dmn6XnvZHnu5zmiJbnqI3lkI7lho3or5UiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgaWYgci50ZXh0IGFuZCByLmpzb24oKVsiZXJyY29kZSJdID09IDA6CiAgICAgICAgICAgICAgICAgICAgcmVzID0gci5qc29uKCkKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLotKblj7dbe3NlbGYubmFtZX1d56ysW3tyZWZyZXNoVGltZSsxfV3mrKHojrflj5bnrKxbe2FyY3RpbGVUaW1lfV3nr4fpmIXor7vmlofnq6Bbe2luZm9bMF19Xei3s+i9rOmTvuaOpeaIkOWKnyIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGRlY29kZWRfc3RyID0ganNvbi5sb2FkcyhyLnRleHQpCiAgICAgICAgICAgICAgICAgICAgaWYgZGVjb2RlZF9zdHJbIm1zZyJdOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeesrFt7cmVmcmVzaFRpbWUrMX1d5qyh6I635Y+W56ysW3thcmN0aWxlVGltZX1d56+H6ZiF6K+75paH56ugW3tpbmZvWzBdfV3ot7Povazpk77mjqXlpLHotKXvvJp7ZGVjb2RlZF9zdHJbJ21zZyddfSIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeesrFt7cmVmcmVzaFRpbWUrMX1d5qyh6I635Y+W56ysW3thcmN0aWxlVGltZX1d56+H6ZiF6K+75paH56ugW3tpbmZvWzBdfV3ot7Povazpk77mjqXlpLHotKXvvJp7ci50ZXh0fSIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxLjUpCiAgICAgICAgICAgICAgICByZWZyZXNoVGltZSA9IHJlZnJlc2hUaW1lICsgMQogICAgICAgICAgICAgICAgaWYgcmVmcmVzaFRpbWUgPj0gNToKICAgICAgICAgICAgICAgICAgICBwcmludChmIuKaoO+4jyDotKblj7dbe3NlbGYubmFtZX1d6I635Y+W6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV3otoXml7bigKbigKYiKQogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICB3ZWNoYXRQb3N0TGluayA9ICIiCiAgICAgICAgICAgIHByaW50KCLojrflj5bmlofnq6DmlbDmja7vvJoiLCByZXMpCiAgICAgICAgICAgIGlmIHJlcy5nZXQoImVycmNvZGUiKSA9PSAwOgogICAgICAgICAgICAgICAgcmV0dXJuTGluayA9ICIiCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuTGluayA9IHJlcy5nZXQoImRhdGEiKS5nZXQoImxpbmsiKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgIGVycm9yTXNnID0gcmVzLmdldCgiZGF0YSIpCiAgICAgICAgICAgICAgICAgICAgIyBwcmludCgiMeaKpemUme+8miIsIGUpCiAgICAgICAgICAgICAgICAgICAgIyBwcmludCgiMei/lOWbnu+8miIsIHJhd1JlcykKICAgICAgICAgICAgICAgICAgICBpZiAiNDA0IE5vdCBGb3VuZCIgaW4gZXJyb3JNc2c6CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTXNnID0gIuWPsOWtkOaOpeWPo+S4jeihjO+8jOW0qeS6hn4iCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmV0cnlSZWFkaW5nID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV3ojrflj5bpmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XemTvuaOpeWksei0pe+8jOeWkeS8vOWPsOWtkOaOpeWPo+WkquWeg+Wcvu+8jOW0qeS6hu+8jOi/lOWbnuaVsOaNruS4uu+8miIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1zZywKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICBmIuKaoO+4jyDotKblj7dbe3NlbGYubmFtZX1d6I635Y+W6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV3pk77mjqXlpLHotKXvvIznlpHkvLzlj7DlrZDmjqXlj6PlpKrlnoPlnL7vvIzltKnkuobvvIzov5Tlm57mlbDmja7kuLrvvJoiLAogICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1zZywKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGlmICJtcC53ZWl4aW4ucXEuY29tIiBpbiByZXR1cm5MaW5rOgogICAgICAgICAgICAgICAgICAgIGlmIG15a2t5ZFJlYWRQdXJlTG9nID09IEZhbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5b6u5L+h5paH56ug77yae3JldHVybkxpbmt9IikKICAgICAgICAgICAgICAgICAgICB3ZWNoYXRQb3N0TGluayA9IHJldHVybkxpbmsKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ug5YeG5aSH6Lez6L2s77yae2xpbmt9IikKICAgICAgICAgICAgICAgICAgICB3ZWNoYXRQb3N0TGluayA9IHNlbGYuanVtcChyZXR1cm5MaW5rKQogICAgICAgICAgICAgICAgICAgIGlmIG15a2t5ZFJlYWRQdXJlTG9nID09IEZhbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDpmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4flvq7kv6Hmlofnq6DvvJp7d2VjaGF0UG9zdExpbmt9IgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBpZiBteWtreWRSZWFkUHVyZUxvZyA9PSBGYWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ug77yae3dlY2hhdFBvc3RMaW5rfSIpCiAgICAgICAgICAgICAgICBwb3N0SW5mbyA9IGdldGluZm8od2VjaGF0UG9zdExpbmspCiAgICAgICAgICAgICAgICBpZiBwb3N0SW5mbyA9PSBGYWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XeWboCDojrflj5blhazkvJflj7fmlofnq6Dkv6Hmga/kuI3miJDlip/vvIzlr7zoh7TpmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XSDlpLHotKXigKbigKYiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgc2xlZXBUaW1lID0gcmFuZG9tLnJhbmRpbnQoNywgMTApCiAgICAgICAgICAgICAgICAjIOWmguaenOaYr+ajgOa1i+eJueW+geWIsOeahOaWh+eroCDmiJbogIUg5ZCO5LiA56+H5paH56ug5LiO5YmN5LiA56+H55u45Ly8CiAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgY2hlY2tEaWN0LmdldChwb3N0SW5mb1s0XSkgIT0gTm9uZQogICAgICAgICAgICAgICAgICAgICMgb3IgKCImaWR4PTEiIG5vdCBpbiB3ZWNoYXRQb3N0TGluaykKICAgICAgICAgICAgICAgICAgICBvciAoIiZpZHg9NyIgaW4gd2VjaGF0UG9zdExpbmspCiAgICAgICAgICAgICAgICAgICAgb3IgKCImaWR4PTUiIGluIHdlY2hhdFBvc3RMaW5rKQogICAgICAgICAgICAgICAgICAgIG9yIChyZXMuZ2V0KCJkYXRhIikuZ2V0KCJhIikgPT0gMikKICAgICAgICAgICAgICAgICAgICBvciAoIiZjaGtzbT0iIGluIHdlY2hhdFBvc3RMaW5rKQogICAgICAgICAgICAgICAgKToKICAgICAgICAgICAgICAgICAgICBzbGVlcFRpbWUgPSByZWFkUG9zdERlbGF5IG9yIHJhbmRvbS5yYW5kaW50KDE1LCAyMCkKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XemYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1dIOajgOa1i+WIsOeWkeS8vOajgOa1i+aWh+eroO+8jOato+WcqOaOqOmAge+8jOetieW+hei/h+ajgOa1i++8jOetieW+heaXtumXtO+8mntzbGVlcFRpbWV956eS44CC44CC44CCIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBnbG9iYWwgbGlua19jYWNoZQogICAgICAgICAgICAgICAgICAgIGZldGNoX3d4X3RpbWVfYW5kX3JlY29yZCh3ZWNoYXRQb3N0TGluaywgbGlua19jYWNoZSkKICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLndlY2hhdEJ1c3NpbmVzc0tleToKICAgICAgICAgICAgICAgICAgICAgICAgcHVzaFdlY2hhdEJ1c3NpbmVzcyhzZWxmLndlY2hhdEJ1c3NpbmVzc0tleSwgd2VjaGF0UG9zdExpbmspCiAgICAgICAgICAgICAgICAgICAgZWxpZiBzZWxmLmFwcFRva2VuOgogICAgICAgICAgICAgICAgICAgICAgICBwdXNoKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hcHBUb2tlbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudG9waWNJZHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAi54yr54yr55yL55yL6ZiF6K+76L+H5qOA5rWLIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlY2hhdFBvc3RMaW5rLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiLotKblj7dbe3NlbGYubmFtZX1d6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV0g5q2j5Zyo562J5b6F6L+H5qOA5rWL77yM562J5b6F5pe26Ze077yae3NsZWVwVGltZX3np5JcbuW5u+eUn+aPkOekuu+8muW/q+eCue+8jOWIq+iAveaQgeaXtumXtOS6hu+8gSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibXlra3lkIiwKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XemYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1dIOmcgOimgei/h+ajgOa1i++8jOS9huaYr+acqumFjee9ruaOqOmAgXRva2Vu77yM5Li65LqG6YG/5YWN6buR5Y+377yM5YGc5q2i6ZiF6K+744CC44CC44CCIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLinIUg6LSm5Y+3W3tzZWxmLm5hbWV9XemYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1dIOmdnuajgOa1i+aWh+eroO+8jOaooeaLn+ivu3tzbGVlcFRpbWV956eSIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHNlbGYubGFzdGJpeiA9IHBvc3RJbmZvWzRdCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKHNsZWVwVGltZSkKICAgICAgICAgICAgICAgIHUxID0gZiJodHRwOi8ve2luZm9bMV1bJ0hvc3QnXX0vamlhamluYmltYW8/dGltZT17c2xlZXBUaW1lfSZwc2lnbj17cmFuZG9tLnJhbmRpbnQoMSwgMTAwMCl9JnVrPXtpbmZvWzBdfSIKICAgICAgICAgICAgICAgIHIxID0gc2FmZV9yZXF1ZXN0KCJHRVQiLCB1MSwgaGVhZGVycz1pbmZvWzFdLCB2ZXJpZnk9RmFsc2UpCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgIyBwcmludCgi5aKe5Yqg6YeR5biB77yaIiwgdTEsIGluZm9bMV0sIHIxLnRleHQpCiAgICAgICAgICAgICAgICAgICAgaWYgcjEudGV4dCBhbmQgcjEuanNvbigpOgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIuKchSDotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d5omA5b6X6YeR5biB77yae3IxLmpzb24oKVsnZGF0YSddWydnb2xkJ1195Liq77yM6LSm5oi35b2T5YmN6YeR5biB77yae3IxLmpzb24oKVsnZGF0YSddWydsYXN0X2dvbGQnXX3kuKrvvIzku4rml6Xlt7Lor7vvvJp7cjEuanNvbigpWydkYXRhJ11bJ2RheV9yZWFkJ1195qyh77yM5LuK5pel5pyq6K+7IHtyMS5qc29uKClbJ2RhdGEnXVsncmVtYWluX3JlYWQnXX3nr4fmlofnq6AiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi4p2MIOi0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV3lvILluLjvvJp7cjEuanNvbigpLmdldCgnbXNnJyl9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgIuacrOasoemYheivu+aXoOaViCIgaW4gcjEuanNvbigpLmdldCgibXNnIik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi4p2MIOi0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV3lpLHotKXvvJp7cjEudGV4dH0iCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICAjIHByaW50KCIy5oql6ZSZ77yaIiwgZSkKICAgICAgICAgICAgICAgICAgICAjIHByaW50KCIy6L+U5Zue77yaIiwgcjEudGV4dCkKICAgICAgICAgICAgICAgICAgICBlcnJvck1zZyA9IHIxLnRleHQKICAgICAgICAgICAgICAgICAgICBpZiAiNDA0IE5vdCBGb3VuZCIgaW4gZXJyb3JNc2c6CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTXNnID0gIuWPsOWtkOaOpeWPo+S4jeihjO+8jOW0qeS6hn4iCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmV0cnlSZWFkaW5nID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi4pqg77iPIOi0puWPt1t7c2VsZi5uYW1lfV0g6ZiF6K+756ysW3thcmN0aWxlVGltZX1d56+H5paH56ugW3tpbmZvWzBdfV3lvILluLjvvIzov5Tlm57mlbDmja7kuLrvvJoiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNc2csCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLimqDvuI8g6LSm5Y+3W3tzZWxmLm5hbWV9XSDpmIXor7vnrKxbe2FyY3RpbGVUaW1lfV3nr4fmlofnq6Bbe2luZm9bMF19XeW8guW4uO+8jOi/lOWbnuaVsOaNruS4uu+8miIsCiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTXNnLAogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBlbGlmIHJlcy5nZXQoImVycmNvZGUiKSA9PSA0MDU6CiAgICAgICAgICAgICAgICBwcmludChmIuKaoO+4jyDotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d6ZiF6K+76YeN5aSNIikKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMS41KQogICAgICAgICAgICBlbGlmIHJlcy5nZXQoImVycmNvZGUiKSA9PSA0MDc6CiAgICAgICAgICAgICAgICBwcmludChmIuKaoO+4jyDotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d6ZiF6K+757uT5p2fIikKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludChmIuKaoO+4jyDotKblj7dbe3NlbGYubmFtZX1dIOmYheivu+esrFt7YXJjdGlsZVRpbWV9Xeevh+aWh+eroFt7aW5mb1swXX1d5pyq55+l5oOF5Ya1IikKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMS41KQogICAgICAgICAgICBhcmN0aWxlVGltZSA9IGFyY3RpbGVUaW1lICsgMQoKICAgIGRlZiBqdW1wKHNlbGYsIGxpbmspOgogICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeW8gOWni+acrOasoemYheivu+KApuKApiIpCiAgICAgICAgaG4gPSB1cmxwYXJzZShsaW5rKS5uZXRsb2MKICAgICAgICBoID0gewogICAgICAgICAgICAiSG9zdCI6IGhuLAogICAgICAgICAgICAiQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgIlVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHMiOiAiMSIsCiAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDcuMC4wLjAgU2FmYXJpLzUzNy4zNiBOZXRUeXBlL1dJRkkgTWljcm9NZXNzZW5nZXIvNy4wLjIwLjE3ODEoMHg2NzAwMTQzQikgV2luZG93c1dlY2hhdCgweDYzMDkwNjIxKSBYV0VCLzgzNTEgRmx1ZSIsCiAgICAgICAgICAgICJBY2NlcHQiOiAidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwKICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aCIsCiAgICAgICAgICAgICJDb29raWUiOiBzZWxmLkNvb2tpZSwKICAgICAgICB9CiAgICAgICAgciA9IHNhZmVfcmVxdWVzdCgiR0VUIiwgbGluaywgaGVhZGVycz1oLCBhbGxvd19yZWRpcmVjdHM9RmFsc2UsIHZlcmlmeT1GYWxzZSkKICAgICAgICAjIHByaW50KHIuc3RhdHVzX2NvZGUpCiAgICAgICAgTG9jYXRpb24gPSByLmhlYWRlcnMuZ2V0KCJMb2NhdGlvbiIpCiAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5byA5aeL6ZiF6K+75paH56ugIC0ge0xvY2F0aW9ufSIpCiAgICAgICAgcmV0dXJuIExvY2F0aW9uCgogICAgZGVmIHdpdGhkcmF3UG9zdChzZWxmKToKICAgICAgICB1ID0gZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9L2hhb2Jhb2Jhby9nZXR3aXRoZHJhdyIKICAgICAgICBwID0gZiJzaWduaWQ9e3NlbGYucmVxdWVzdF9pZH0mdWE9MCZwdHlwZT0wJnBhY2NvdW50PSZwbmFtZT0iCiAgICAgICAgaWYgc2VsZi5hbGlBY2NvdW50IGFuZCBzZWxmLmFsaU5hbWU6CiAgICAgICAgICAgIHAgPSBmInNpZ25pZD17c2VsZi5yZXF1ZXN0X2lkfSZ1YT0yJnB0eXBlPTEmcGFjY291bnQ9e3F1b3RlKHNlbGYuYWxpQWNjb3VudCl9JnBuYW1lPXtxdW90ZShzZWxmLmFsaU5hbWUpfSIKICAgICAgICByID0gc2FmZV9yZXF1ZXN0KAogICAgICAgICAgICAiUE9TVCIsCiAgICAgICAgICAgIHUsCiAgICAgICAgICAgIGhlYWRlcnM9ewogICAgICAgICAgICAgICAgIkFjY2VwdCI6ICJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQsICovKjsgcT0wLjAxIiwKICAgICAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSIsCiAgICAgICAgICAgICAgICAiQWNjZXB0LUxhbmd1YWdlIjogInpoLUNOLHpoO3E9MC45IiwKICAgICAgICAgICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IiwKICAgICAgICAgICAgICAgICJDb29raWUiOiBzZWxmLkNvb2tpZSwKICAgICAgICAgICAgICAgICJIb3N0IjogZiJ7c2VsZi5kb21uYWluSG9zdH0iLAogICAgICAgICAgICAgICAgIk9yaWdpbiI6IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fSIsCiAgICAgICAgICAgICAgICAiUHJveHktQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgICAgICJSZWZlcmVyIjogZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9L2hhb2Jhb2Jhby93aXRoZHJhdyIsCiAgICAgICAgICAgICAgICAiWC1SZXF1ZXN0ZWQtV2l0aCI6ICJYTUxIdHRwUmVxdWVzdCIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRhdGE9cCwKICAgICAgICAgICAgdmVyaWZ5PUZhbHNlLAogICAgICAgICkKICAgICAgICBwcmludChmIuKchSDotKblj7dbe3NlbGYubmFtZX1dIOaPkOeOsOe7k+aenO+8miIsIHIuanNvbigpWyJtc2ciXSkKCiAgICBkZWYgd2l0aGRyYXcoc2VsZik6CiAgICAgICAgZ29sZCA9IGludChpbnQoc2VsZi5yZW1haW5fZ29sZCkgLyAxMDAwKSAqIDEwMDAKICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g5pys5qyh5o+Q546w6YeR6aKdICIsIHNlbGYucmVtYWluLCAi5YWDICIsIGdvbGQsICLph5HluIEiKQogICAgICAgIHdpdGhkcmF3QmFsYW5jZSA9IHJvdW5kKChpbnQoc2VsZi50eGJ6KSAvIDEwMDAwKSwgMykKICAgICAgICBpZiBnb2xkIG9yIChzZWxmLnJlbWFpbiA+PSB3aXRoZHJhd0JhbGFuY2UpOgogICAgICAgICAgICBpZiBnb2xkIGFuZCAoKGZsb2F0KHNlbGYucmVtYWluKSArIGdvbGQgLyAxMDAwMCkgPD0gMzApOgogICAgICAgICAgICAgICAgIyDlvIDlp4vmj5DnjrAKICAgICAgICAgICAgICAgICMg5Lul5LiL6YC76L6R5rKh55So77yM5LiN566h5L2gZ29sZOS4uuWkmuWwke+8jOWug+mDveaYr+WFqOmDqOWFkeaNogogICAgICAgICAgICAgICAgIyBtYXhDYW5FeGNoYW5nZUdvbGQgPSAoMjkuOSAtIHNlbGYucmVtYWluKSAqIDEwMDAwCiAgICAgICAgICAgICAgICAjIGlmIG1heENhbkV4Y2hhbmdlR29sZCA+IDA6CiAgICAgICAgICAgICAgICAjICAgICBnb2xkID0gbWluKG1heENhbkV4Y2hhbmdlR29sZCwgZ29sZCkKICAgICAgICAgICAgICAgICMgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDkuLrpgb/lhY3otoXov4fkuInljYHlnZfvvIzmnKzmrKHlhZHmjaLph5HluIHmlbDkuLogIiwgZ29sZCwgIumHkeW4gSIpCiAgICAgICAgICAgICAgICB1MSA9IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS9oYW9iYW9iYW8vZ2V0Z29sZCIKICAgICAgICAgICAgICAgIHAxID0gZiJyZXF1ZXN0X2lkPXtzZWxmLnJlcXVlc3RfaWR9JmdvbGQ9e2dvbGR9IgogICAgICAgICAgICAgICAgciA9IHNhZmVfcmVxdWVzdCgKICAgICAgICAgICAgICAgICAgICAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgdTEsCiAgICAgICAgICAgICAgICAgICAgZGF0YT1wMSwKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPXsKICAgICAgICAgICAgICAgICAgICAgICAgIkFjY2VwdCI6ICJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQsICovKjsgcT0wLjAxIiwKICAgICAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aDtxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IiwKICAgICAgICAgICAgICAgICAgICAgICAgIkNvb2tpZSI6IHNlbGYuQ29va2llLAogICAgICAgICAgICAgICAgICAgICAgICAiSG9zdCI6IGYie3NlbGYuZG9tbmFpbkhvc3R9IiwKICAgICAgICAgICAgICAgICAgICAgICAgIk9yaWdpbiI6IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJQcm94eS1Db25uZWN0aW9uIjogImtlZXAtYWxpdmUiLAogICAgICAgICAgICAgICAgICAgICAgICAiUmVmZXJlciI6IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS9oYW9iYW9iYW8vd2l0aGRyYXciLAogICAgICAgICAgICAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDcxZCkgWFdFQi84NDYxIEZsdWUiLAogICAgICAgICAgICAgICAgICAgICAgICAiWC1SZXF1ZXN0ZWQtV2l0aCI6ICJYTUxIdHRwUmVxdWVzdCIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgcmVzID0gci5qc29uKCkKICAgICAgICAgICAgICAgICAgICBpZiByZXMuZ2V0KCJlcnJjb2RlIikgPT0gMDoKICAgICAgICAgICAgICAgICAgICAgICAgd2l0aGRyYXdCYWxhbmNlTnVtID0gc2VsZi5yZW1haW4gKyBmbG9hdChyZXNbImRhdGEiXVsibW9uZXkiXSkKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIuKchSDotKblj7dbe3NlbGYubmFtZX1dIOmHkeW4geWFkeaNouS4uueOsOmHkeaIkOWKn++8jOW8gOWni+aPkOeOsO+8jOmihOiuoeWIsOi0piB7d2l0aGRyYXdCYWxhbmNlTnVtfSDlhYMgPj4+ICIKICAgICAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgd2l0aGRyYXdCYWxhbmNlTnVtIDwgd2l0aGRyYXdCYWxhbmNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5rKh5pyJ6L6+5Yiw5o+Q546w5qCH5YeGIHt3aXRoZHJhd0JhbGFuY2V9IOWFgyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi53aXRoZHJhd1Bvc3QoKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDph5HluIHlhZHmjaLkuLrnjrDph5HlpLHotKXvvJoiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgci50ZXh0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiDmj5DnjrDlnLDlnYDvvJoiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdTEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIOaPkOeOsOWPguaVsO+8miIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwMSwKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgICMgcmFpc2UgZQogICAgICAgICAgICAgICAgICAgICMg5aSE55CG5byC5bi4CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1dIOaPkOeOsOWksei0pe+8miIsIGUpCiAgICAgICAgICAgIHNlbGYud2l0aGRyYXdQb3N0KCkKCiAgICBkZWYgaW5pdChzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHIgPSBzYWZlX3JlcXVlc3QoCiAgICAgICAgICAgICAgICAiR0VUIiwKICAgICAgICAgICAgICAgIGdldE5ld0ludml0ZVVybCgpLAogICAgICAgICAgICAgICAgaGVhZGVycz17CiAgICAgICAgICAgICAgICAgICAgIlVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHMiOiAiMSIsCiAgICAgICAgICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA3MWQpIFhXRUIvODQ2MSBGbHVlIiwKICAgICAgICAgICAgICAgICAgICAiQWNjZXB0IjogInRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgICAgICAgICAiQWNjZXB0LUxhbmd1YWdlIjogInpoLUNOLHpoO3E9MC45IiwKICAgICAgICAgICAgICAgICAgICAiQ29va2llIjogc2VsZi5Db29raWUsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdmVyaWZ5PUZhbHNlLAogICAgICAgICAgICAgICAgIyDnpoHmraLph43lrprlkJEKICAgICAgICAgICAgICAgIGFsbG93X3JlZGlyZWN0cz1GYWxzZSwKICAgICAgICAgICAgKQogICAgICAgICAgICBzZWxmLmRvbW5haW5Ib3N0ID0gci5oZWFkZXJzLmdldCgiTG9jYXRpb24iKS5zcGxpdCgiLyIpWzJdCiAgICAgICAgICAgICMgcHJpbnQoci50ZXh0KQogICAgICAgICAgICBpZiBteWtreWRSZWFkUHVyZUxvZyA9PSBGYWxzZToKICAgICAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XeaPkOWPluWIsOeahOWfn+WQje+8mntzZWxmLmRvbW5haW5Ib3N0fSIpCiAgICAgICAgICAgICMgc2VsZi5oZWFkZXJzID0gewogICAgICAgICAgICAjICAgICAiQ29ubmVjdGlvbiI6ICJrZWVwLWFsaXZlIiwKICAgICAgICAgICAgIyAgICAgIkFjY2VwdCI6ICJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQsICovKjsgcT0wLjAxIiwKICAgICAgICAgICAgIyAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA2MjEpIFhXRUIvODM1MSBGbHVlIiwKICAgICAgICAgICAgIyAgICAgIlgtUmVxdWVzdGVkLVdpdGgiOiAiWE1MSHR0cFJlcXVlc3QiLAogICAgICAgICAgICAjICAgICAiUmVmZXJlciI6IGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS8iLAogICAgICAgICAgICAjICAgICAiT3JpZ2luIjogZiJodHRwOi8ve3NlbGYuZG9tbmFpbkhvc3R9IiwKICAgICAgICAgICAgIyAgICAgIyAiSG9zdCI6IGYie3NlbGYuZG9tbmFpbkhvc3R9IiwKICAgICAgICAgICAgIyAgICAgIkFjY2VwdC1FbmNvZGluZyI6ICJnemlwLCBkZWZsYXRlIiwKICAgICAgICAgICAgIyAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aCIsCiAgICAgICAgICAgICMgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IiwKICAgICAgICAgICAgIyAgICAgIkNvb2tpZSI6IHNlbGYuQ29va2llLAogICAgICAgICAgICAjIH0KICAgICAgICAgICAgIyAjIOiOt+WPlnJlcXVlc3RJZAogICAgICAgICAgICBzZWxmLnJlYWRKdW1wUGF0aCA9ICIiCiAgICAgICAgICAgIGlmIG15a2t5ZERldGVjdGluZ1NlYWxTdGF0dXM6CiAgICAgICAgICAgICAgICByID0gc2FmZV9yZXF1ZXN0KAogICAgICAgICAgICAgICAgICAgICJHRVQiLAogICAgICAgICAgICAgICAgICAgIGYiaHR0cDovL3tzZWxmLmRvbW5haW5Ib3N0fS9oYW9iYW9iYW8vaG9tZSIsCiAgICAgICAgICAgICAgICAgICAgaGVhZGVycz17CiAgICAgICAgICAgICAgICAgICAgICAgICJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzIjogIjEiLAogICAgICAgICAgICAgICAgICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA3LjAuMC4wIFNhZmFyaS81MzcuMzYgTmV0VHlwZS9XSUZJIE1pY3JvTWVzc2VuZ2VyLzcuMC4yMC4xNzgxKDB4NjcwMDE0M0IpIFdpbmRvd3NXZWNoYXQoMHg2MzA5MDcxZCkgWFdFQi84NDYxIEZsdWUiLAogICAgICAgICAgICAgICAgICAgICAgICAiQWNjZXB0IjogInRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJBY2NlcHQtTGFuZ3VhZ2UiOiAiemgtQ04semg7cT0wLjkiLAogICAgICAgICAgICAgICAgICAgICAgICAiQ29va2llIjogc2VsZi5Db29raWUsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB2ZXJpZnk9RmFsc2UsCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBodG1sdGV4dCA9IHIudGV4dAogICAgICAgICAgICAgICAgcmVhZF9qdW1wX3JlYWRfdGV4dCA9IGV4dHJhY3RfbWlkZGxlX3RleHQoCiAgICAgICAgICAgICAgICAgICAgaHRtbHRleHQsICJmdW5jdGlvbiByZWFkX2p1bXBfcmVhZCgpeyIsICJzdWNjZXNzOiBmdW5jdGlvbiIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGlmIHJlYWRfanVtcF9yZWFkX3RleHQ6CiAgICAgICAgICAgICAgICAgICAgcmVhZEp1bXBQYXRoID0gZXh0cmFjdF9taWRkbGVfdGV4dCgKICAgICAgICAgICAgICAgICAgICAgICAgcmVhZF9qdW1wX3JlYWRfdGV4dCwgInVybDogZG9tYWluKyciLCAiJywiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGlmIHJlYWRKdW1wUGF0aDoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWFkSnVtcFBhdGggPSByZWFkSnVtcFBhdGgKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDliJ3lp4vljJblpLHotKXvvIzor7fmiYvliqjorr/pl67kuIvnoa7orqTpobXpnaLmsqHltKnmuoMg5oiW6ICFIOeojeWQjuWGjeivleWQp++8jOS4gOebtOS4jeihjO+8jOivt+WJjeW+gFRH576k5Y+N6aaIfiAiCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGhpZGRlblRpcFRleHQgPSBleHRyYWN0X21pZGRsZV90ZXh0KAogICAgICAgICAgICAgICAgICAgICAgICBodG1sdGV4dCwgJzwhLS0gPHAgc3R5bGU9ImNvbG9yOnJlZCI+JywgIjxicj4iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICMg56e76Zmk5o6J5rOo6YeK55qE5YWs5ZGK6YOo5YiGCiAgICAgICAgICAgICAgICAgICAgaHRtbHRleHQgPSBodG1sdGV4dC5yZXBsYWNlKAogICAgICAgICAgICAgICAgICAgICAgICAnPCEtLSA8cCBzdHlsZT0iY29sb3I6cmVkIj4nICsgaGlkZGVuVGlwVGV4dCArICI8YnI+IiwgIiIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgdGlwVGV4dCA9IGV4dHJhY3RfbWlkZGxlX3RleHQoCiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWx0ZXh0LCAnPHAgc3R5bGU9ImNvbG9yOnJlZCI+JywgIjxicj4iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGlmICLlrZjlnKjov53op4Tmk43kvZwiIGluIGh0bWx0ZXh0OgogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g6KKr5qOA5rWL5Yiw5LqG77yM5bey57uP6KKr5bCB77yM57uI5q2i5Lu75Yqh77yM5b+r5Y675o+Q6YaS5aSn5a625ZCnfiAiKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgICAgICAgICBlbGlmICLns7vnu5/nu7TmiqTkuK0iIGluIHRpcFRleHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICMgPHAgc3R5bGU9ImNvbG9yOnJlZCI+57O757uf57u05oqk5Lit77yM6aKE6K6h5ZGo5LiA5oGi5aSN77yM5LiO56CB5peg5YWz77yBPGJyPgogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV0g5qOA5rWL5Yiw57O757uf57u05oqk5Lit77yM5YWs5ZGK5YaF5a655Li6IFt7dGlwVGV4dH1dIO+8jOe7iOatouS7u+WKoSIpCiAgICAgICAgICAgICAgICAgICAgICAgIHN5cy5leGl0KDApCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIui0puWPt1t7c2VsZi5uYW1lfV0g5Yid5aeL5YyW5aSx6LSl77yM6K+35omL5Yqo6K6/6Zeu5LiL56Gu6K6k6aG16Z2i5rKh5bSp5rqDIOaIluiAhSDnqI3lkI7lho3or5XlkKfvvIzkuIDnm7TkuI3ooYzvvIzor7fliY3lvoBUR+e+pOWPjemmiH4gIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5yZWFkSnVtcFBhdGggPSAiL2hhb2Jhb2Jhby93dG1wZG9tYWluMiIKICAgICAgICAgICAgIyAjIOiOt+WPluaPkOeOsOmhtemdouWcsOWdgAogICAgICAgICAgICByID0gc2FmZV9yZXF1ZXN0KAogICAgICAgICAgICAgICAgIkdFVCIsCiAgICAgICAgICAgICAgICBmImh0dHA6Ly97c2VsZi5kb21uYWluSG9zdH0vaGFvYmFvYmFvL3dpdGhkcmF3IiwKICAgICAgICAgICAgICAgIGhlYWRlcnM9ewogICAgICAgICAgICAgICAgICAgICJVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzIjogIjEiLAogICAgICAgICAgICAgICAgICAgICJVc2VyLUFnZW50IjogIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDcuMC4wLjAgU2FmYXJpLzUzNy4zNiBOZXRUeXBlL1dJRkkgTWljcm9NZXNzZW5nZXIvNy4wLjIwLjE3ODEoMHg2NzAwMTQzQikgV2luZG93c1dlY2hhdCgweDYzMDkwNzFkKSBYV0VCLzg0NjEgRmx1ZSIsCiAgICAgICAgICAgICAgICAgICAgIkFjY2VwdCI6ICJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjkiLAogICAgICAgICAgICAgICAgICAgICJBY2NlcHQtRW5jb2RpbmciOiAiZ3ppcCwgZGVmbGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgIkFjY2VwdC1MYW5ndWFnZSI6ICJ6aC1DTix6aDtxPTAuOSIsCiAgICAgICAgICAgICAgICAgICAgIkNvb2tpZSI6IHNlbGYuQ29va2llLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHZlcmlmeT1GYWxzZSwKICAgICAgICAgICAgKQogICAgICAgICAgICBodG1sdGV4dCA9IHIudGV4dAogICAgICAgICAgICBzaWduaWRsID0gcmUuc2VhcmNoKCdyZXF1ZXN0X2lkID0gIiguKj8pIicsIGh0bWx0ZXh0KQogICAgICAgICAgICBpZiBzaWduaWRsID09IFtdOgogICAgICAgICAgICAgICAgaWYgbXlra3lkUmVhZFB1cmVMb2cgPT0gRmFsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLotKblj7dbe3NlbGYubmFtZX1d5Yid5aeL5YyWIOaPkOeOsOWPguaVsCDlpLHotKXvvIzlsJ3or5Xlj6bkuIDnp43liJ3lp4vljJYgPj4+ICIpCiAgICAgICAgICAgICAgICByID0gc2FmZV9yZXF1ZXN0KAogICAgICAgICAgICAgICAgICAgICJHRVQiLAogICAgICAgICAgICAgICAgICAgIGYiaHR0cHM6Ly9jb2RlLnN5d2ptbG91LmNvbS5jbi9iYW9iYW9jb2RlLnBocCIsCiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5PUZhbHNlLAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgZG9tbmFpbkhvc3QgPSByLmpzb24oKVsiZGF0YSJdWyJsdW9kaSJdLnNwbGl0KCIvIilbMl0KICAgICAgICAgICAgICAgIHIgPSBzYWZlX3JlcXVlc3QoCiAgICAgICAgICAgICAgICAgICAgIkdFVCIsCiAgICAgICAgICAgICAgICAgICAgZiJodHRwOi8ve2RvbW5haW5Ib3N0fS9oYW9iYW9iYW8vd2l0aGRyYXciLAogICAgICAgICAgICAgICAgICAgIGhlYWRlcnM9ewogICAgICAgICAgICAgICAgICAgICAgICAiVXBncmFkZS1JbnNlY3VyZS1SZXF1ZXN0cyI6ICIxIiwKICAgICAgICAgICAgICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNy4wLjAuMCBTYWZhcmkvNTM3LjM2IE5ldFR5cGUvV0lGSSBNaWNyb01lc3Nlbmdlci83LjAuMjAuMTc4MSgweDY3MDAxNDNCKSBXaW5kb3dzV2VjaGF0KDB4NjMwOTA3MWQpIFhXRUIvODQ2MSBGbHVlIiwKICAgICAgICAgICAgICAgICAgICAgICAgIkFjY2VwdCI6ICJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjkiLAogICAgICAgICAgICAgICAgICAgICAgICAiQWNjZXB0LUVuY29kaW5nIjogImd6aXAsIGRlZmxhdGUiLAogICAgICAgICAgICAgICAgICAgICAgICAiQWNjZXB0LUxhbmd1YWdlIjogInpoLUNOLHpoO3E9MC45IiwKICAgICAgICAgICAgICAgICAgICAgICAgIkNvb2tpZSI6IHNlbGYuQ29va2llLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5PUZhbHNlLAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgaHRtbHRleHQgPSByLnRleHQKICAgICAgICAgICAgICAgIHNpZ25pZGwgPSByZS5zZWFyY2goJ3JlcXVlc3RfaWQgPSAiKC4qPykiJywgaHRtbHRleHQpCiAgICAgICAgICAgICAgICBpZiBzaWduaWRsID09IFtdOgogICAgICAgICAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDlpJrmrKHliJ3lp4vljJYg5o+Q546w5Y+C5pWwIOWksei0pSwg6LSm5Y+35byC5bi477yM6K+35qOA5p+lQ29va2ll77yBIikKICAgICAgICAgICAgICAgICAgICByID0gc2FmZV9yZXF1ZXN0KAogICAgICAgICAgICAgICAgICAgICAgICAiR0VUIiwKICAgICAgICAgICAgICAgICAgICAgICAgZiJodHRwczovL2NvZGUuc3l3am1sb3UuY29tLmNuL2Jhb2Jhb2NvZGUucGhwIiwKICAgICAgICAgICAgICAgICAgICAgICAgdmVyaWZ5PUZhbHNlLAogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBzZWxmLmRvbW5haW5Ib3N0ID0gci5qc29uKClbImRhdGEiXVsibHVvZGkiXS5zcGxpdCgiLyIpWzJdCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYucmVxdWVzdF9pZCA9IHNpZ25pZGxbMV0KICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYucmVxdWVzdF9pZCA9IHNpZ25pZGxbMV0KICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICMgcmFpc2UgZQogICAgICAgICAgICBwcmludChmIui0puWPt1t7c2VsZi5uYW1lfV3liJ3lp4vljJblpLHotKUs6K+35qOA5p+l5L2g55qEY2siKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgcnVuKHNlbGYpOgogICAgICAgIGlmIHNlbGYuaW5pdCgpOgogICAgICAgICAgICBzZWxmLnVzZXJfaW5mbygpCiAgICAgICAgICAgIHNlbGYuZ29sZCgpCiAgICAgICAgICAgIGlmICLnm7TmjqXmj5AiIG5vdCBpbiBzZWxmLm5hbWU6CiAgICAgICAgICAgICAgICBzZWxmLnJlYWQoKQogICAgICAgICAgICAgICAgIyDlpoLmnpzmjqXlj6PltKnkuobvvIzlsLHlsJ3or5XkuInmrKHph43lkK/pmIXor7sKICAgICAgICAgICAgICAgIGlmIHNlbGYucmV0cnlSZWFkaW5nID09IFRydWU6CiAgICAgICAgICAgICAgICAgICAgaWYgbXlra3lkUmVhZFB1cmVMb2cgPT0gRmFsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3tzZWxmLm5hbWV9XSDmo4DmtYvliLDpmIXor7vmjqXlj6PlvILluLjvvIzlsJ3or5Xph43or5V+IikKICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZSgzKToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWFkKCkKICAgICAgICAgICAgICAgICAgICAgICAgIyDpmo/mnLrlu7bov58KICAgICAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcChyYW5kb20ucmFuZG9tKCkgKiAzICsgMSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgc2VsZi5yZXRyeVJlYWRpbmcgPT0gRmFsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICAgICAgc2VsZi5nb2xkKCkKICAgICAgICAgICAgdGltZS5zbGVlcCgzKQogICAgICAgICAgICBzZWxmLndpdGhkcmF3KCkKCgpkZWYgZ2V0TmV3SW52aXRlVXJsKCk6CiAgICByID0gc2FmZV9yZXF1ZXN0KAogICAgICAgICJHRVQiLCAiaHR0cHM6Ly9jb2RlLnN5d2ptbG91LmNvbS5jbi9iYW9iYW9jb2RlLnBocCIsIHZlcmlmeT1GYWxzZQogICAgKS5qc29uKCkKICAgIGlmIHIuZ2V0KCJjb2RlIikgPT0gMDoKICAgICAgICBuZXdFbnRyeVVybCA9IHIuZ2V0KCJkYXRhIikuZ2V0KCJsdW9kaSIpCiAgICAgICAgcGFyc2VkX3VybCA9IHVybHBhcnNlKG5ld0VudHJ5VXJsKQogICAgICAgIGhvc3QgPSBwYXJzZWRfdXJsLmhvc3RuYW1lCiAgICAgICAgcmV0dXJuIGYiaHR0cDovL3MxaTYuMW9iZy5zaG9wL2hhb2Jhb2Jhby9hdXRoLzU4NDg3ZjI5MTk4NWM1ZjMyYzE2YjNiMDFiOTZhOTEyIi5yZXBsYWNlKAogICAgICAgICAgICAiczFpNi4xb2JnLnNob3AiLCBob3N0IG9yICJzMWk2LjFvYmcuc2hvcCIKICAgICAgICApCiAgICBlbHNlOgogICAgICAgIHJldHVybiAiaHR0cDovL3MxaTYuMW9iZy5zaG9wL2hhb2Jhb2Jhby9hdXRoLzU4NDg3ZjI5MTk4NWM1ZjMyYzE2YjNiMDFiOTZhOTEyIgoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICAjIGFwcFRva2Vu77ya6L+Z5Liq5piv5aGrd3hwdXNoZXLnmoRhcHBUb2tlbgogICAgIyB0b3BpY0lkc++8mui/meS4quaYr3d4cHVzaGVy55qEdG9waWNJZHPmlLnmiJDkvaDoh6rlt7HnmoQKICAgICMg56S65L6LOiDlubvnlJ8jb1pkQnAwNHBzZ29OOGROMUVUX3VvODFOVEMzMSMzMDAwI0FUX1V5SWxiajIyMjJueW5FU2JNMnZKeUE3RHJtVW1VWEQjMTE2ODYKICAgIGFjY291bnRzID0gb3MuZ2V0ZW52KCJteWtreWQiKQogICAgaW52aXRlVXJsID0gZ2V0TmV3SW52aXRlVXJsKCkKICAgIGlmIGFjY291bnRzIGlzIE5vbmU6CiAgICAgICAgcHJpbnQoZiLkvaDmsqHmnInloavlhaVteWtreWTvvIzlkovov5DooYzvvJ9cbui1sOS4i+mCgOivt+WRl++8mntpbnZpdGVVcmx9IikKICAgIGVsc2U6CiAgICAgICAgIyDojrflj5bnjq/looPlj5jph4/nmoTlgLzvvIzlubbmjInmjIflrprlrZfnrKbkuLLliIblibLmiJDlpJrkuKrotKblj7fnmoTlj4LmlbDnu4TlkIgKICAgICAgICBhY2NvdW50c19saXN0ID0gb3MuZW52aXJvbi5nZXQoIm15a2t5ZCIpLnNwbGl0KCImIikKCiAgICAgICAgIyDovpPlh7rmnInlh6DkuKrotKblj7cKICAgICAgICBudW1fb2ZfYWNjb3VudHMgPSBsZW4oYWNjb3VudHNfbGlzdCkKICAgICAgICBtb3JlVGlwID0gIiIKICAgICAgICBpZiByZWFkUG9zdERlbGF5ID4gMDoKICAgICAgICAgICAgbW9yZVRpcCA9IGYi5bey6K6+572u55qE5o6o6YCB5paH56ug562J5b6F54K55Ye75pe26Ze05Li6IHtyZWFkUG9zdERlbGF5feenkiAiCiAgICAgICAgcHJpbnQoCiAgICAgICAgICAgIGYi5b2T5YmN6ISa5pys54mI5pys77ya5bm755Sf6a2U5pS56Ieq55So54mIIFYxLjYxIFxu5bm755Sf5o+Q56S677ya6I635Y+W5YiwIHtudW1fb2ZfYWNjb3VudHN9IOS4qui0puWPtyB7bW9yZVRpcH1cbuazqOWGjOWcsOWdgO+8mntpbnZpdGVVcmx9IgogICAgICAgICkKCiAgICAgICAgIyDpgY3ljobmiYDmnInotKblj7cKICAgICAgICBmb3IgaSwgYWNjb3VudCBpbiBlbnVtZXJhdGUoYWNjb3VudHNfbGlzdCwgc3RhcnQ9MSk6CiAgICAgICAgICAgICMgcHJpbnQoIlxuIikKICAgICAgICAgICAgcHJpbnQoIi0iICogNTApCiAgICAgICAgICAgIHByaW50KGYi6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XeW8gOWni+aJp+ihjOS7u+WKoSA+Pj4iKQogICAgICAgICAgICAjIHByaW50KCJcbiIpCiAgICAgICAgICAgICMg5oyJQOespuWPt+WIhuWJsuW9k+WJjei0puWPt+eahOS4jeWQjOWPguaVsAogICAgICAgICAgICB2YWx1ZXMgPSBhY2NvdW50LnNwbGl0KCIjIikKICAgICAgICAgICAgIyBwcmludCh2YWx1ZXMpCiAgICAgICAgICAgIGNnID0ge30KICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgaWYgbGVuKHZhbHVlcykgPT0gMjoKICAgICAgICAgICAgICAgICAgICBjZyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiB2YWx1ZXNbMF0sCiAgICAgICAgICAgICAgICAgICAgICAgICJDb29raWUiOiB2YWx1ZXNbMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eGJ6IjogMzAwMCwKICAgICAgICAgICAgICAgICAgICAgICAgImFsaUFjY291bnQiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFsaU5hbWUiOiAiIiwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGNnID0gewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6IHZhbHVlc1swXSwKICAgICAgICAgICAgICAgICAgICAgICAgIkNvb2tpZSI6IHZhbHVlc1sxXSwKICAgICAgICAgICAgICAgICAgICAgICAgInR4YnoiOiB2YWx1ZXNbMl0gb3IgMzAwMCwKICAgICAgICAgICAgICAgICAgICAgICAgImFsaUFjY291bnQiOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgImFsaU5hbWUiOiAiIiwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICMg5aSE55CG5byC5bi4CiAgICAgICAgICAgICAgICBwcmludCgi5bm755Sf6YC86YC85Y+oOiIsICLphY3nva7nmoTllaXnjqnmhI/vvIznvLrlj4LmlbDkuobmhqjmibnvvIznnIvmuIXohJrmnKzor7TmmI7vvIEiKQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgY2dbImFwcFRva2VuIl0gPSB3eHB1c2hlckFwcFRva2VuIG9yICIiCiAgICAgICAgICAgIGNnWyJ0b3BpY0lkcyJdID0gd3hwdXNoZXJUb3BpY0lkIG9yICIiCiAgICAgICAgICAgICMgcHJpbnQoIuaJi+WKqO+8miIsIGxlbih2YWx1ZXMpLCB2YWx1ZXNbNF0pCiAgICAgICAgICAgIGlmIGxlbih2YWx1ZXMpID49IDQ6CiAgICAgICAgICAgICAgICBpZiB2YWx1ZXNbM106CiAgICAgICAgICAgICAgICAgICAgY2dbImFwcFRva2VuIl0gPSB2YWx1ZXNbM10KICAgICAgICAgICAgaWYgbGVuKHZhbHVlcykgPj0gNToKICAgICAgICAgICAgICAgIGlmIHZhbHVlc1s0XToKICAgICAgICAgICAgICAgICAgICBjZ1sidG9waWNJZHMiXSA9IHZhbHVlc1s0XQogICAgICAgICAgICBpZiBsZW4odmFsdWVzKSA+PSA2OgogICAgICAgICAgICAgICAgaWYgdmFsdWVzWzVdOgogICAgICAgICAgICAgICAgICAgIGNnWyJhbGlOYW1lIl0gPSB2YWx1ZXNbNV0KICAgICAgICAgICAgaWYgbGVuKHZhbHVlcykgPj0gNzoKICAgICAgICAgICAgICAgIGlmIHZhbHVlc1s2XToKICAgICAgICAgICAgICAgICAgICBjZ1siYWxpQWNjb3VudCJdID0gdmFsdWVzWzZdCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIHdlY2hhdEJ1c3NpbmVzc0tleSA9PSAiIjoKICAgICAgICAgICAgICAgICAgICBpZiBjZ1siYXBwVG9rZW4iXS5zdGFydHN3aXRoKCJBVF8iKSA9PSBGYWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLlubvnlJ/mj5DnpLrvvIzotKblj7dbe2FjY291bnQuc3BsaXQoJyMnKVswXX1dIHd4cHVzaCDphY3nva7plJnor6/vvIzlv6vku5Tnu4bnnIvlpLTpg6jor7TmmI7vvIEiKQogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIGlmIChjZ1siYXBwVG9rZW4iXS5zdGFydHN3aXRoKCJBVF8iKSA9PSBGYWxzZSkgb3IgKAogICAgICAgICAgICAgICAgICAgICAgICBjZ1sidG9waWNJZHMiXS5pc2RpZ2l0KCkgPT0gRmFsc2UKICAgICAgICAgICAgICAgICAgICApOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIuW5u+eUn+aPkOekuu+8jOi0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV0gd3hwdXNoIOmFjee9rumUmeivr++8jOW/q+S7lOe7hueci+WktOmDqOivtOaYju+8gSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICBhcGkgPSBISFlEKGNnKQogICAgICAgICAgICAgICAgaWYgY2dbImFsaU5hbWUiXSBhbmQgY2dbImFsaUFjY291bnQiXToKICAgICAgICAgICAgICAgICAgICBwcmludCgKICAgICAgICAgICAgICAgICAgICAgICAgZiLlubvnlJ/mj5DnpLrvvIzotKblj7dbe2FjY291bnQuc3BsaXQoJyMnKVswXX1dIOmHh+eUqOS6hiDmlK/ku5jlrp3mj5DnjrDvvIzlp5PlkI3vvJp7Y2dbJ2FsaU5hbWUnXX3vvIzotKbmiLfvvJp7Y2dbJ2FsaUFjY291bnQnXX0iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludChmIuW5u+eUn+aPkOekuu+8jOi0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV0g6YeH55So5LqGIOW+ruS/oeaPkOeOsCIpCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgYXBpLnJ1bigpCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgIyByYWlzZSBlCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiLlubvnlJ/mj5DnpLrvvIzotKblj7dbe2FjY291bnQuc3BsaXQoJyMnKVswXX1dIOaJp+ihjOWHuumUme+8miIsIGUpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KAogICAgICAgICAgICAgICAgICAgIGYi5bm755Sf5o+Q56S677yM6LSm5Y+3W3thY2NvdW50LnNwbGl0KCcjJylbMF19XSDlh7rplJnllabvvIzkuZ/orrjmmK/lubPlj7DmjqXlj6Ppl67popjvvIzlj6/ku6Xov4fkuIDkvJrlsJ3or5Xph43mlrDov5DooYzvvIzlpoLmnpzov5jmmK/kuI3ooYzvvIzor7flsIbkuIvpnaLmiqXplJnmiKrlm77lj5HliLB0Z+S6pOa1gee+pDoiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICByYWlzZSBlCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAjIHByaW50KCJcbiIpCiAgICAgICAgICAgIHByaW50KCItIiAqIDUwKQogICAgICAgICAgICBwcmludChmIui0puWPt1t7YWNjb3VudC5zcGxpdCgnIycpWzBdfV3miafooYzku7vliqHlrozmr5XvvIEiKQogICAgICAgICAgICAjIHByaW50KCJcbiIpCg=='))
except Exception as e:
    print('脚本执行出错:', str(e))
